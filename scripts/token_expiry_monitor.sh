#!/bin/bash
# Token Expiry Monitoring Script
# Monitors token expiry dates and generates reports

set -euo pipefail

cd "$(dirname "${BASH_SOURCE[0]}")/.." || exit

# Load token environment if available
if [ -f "scripts/load_token_environment.sh" ]; then
    # shellcheck source=scripts/load_token_environment.sh disable=SC1091
    source scripts/load_token_environment.sh > /dev/null 2>&1 || true
fi

# Create reports and logs directories if they don't exist
mkdir -p reports logs

# Function to monitor all tokens
monitor_all() {
    echo "Token Expiry Monitoring - $(date)"
    echo "=================================="

    # List of tokens to monitor (from workflow environment)
    local tokens=(
        "AAR_TOKEN"
        "CI_BOT_TOKEN"
        "CI_ISSUE_AUTOMATION_TOKEN"
        "DEV_ORCHESTRATION_BOT_KEY"
        "PROD_ORCHESTRATION_BOT_KEY"
        "STAGING_ORCHESTRATION_BOT_KEY"
    )

    local total_tokens=${#tokens[@]}
    local checked_tokens=0
    local expired_tokens=0
    local expiring_soon=0

    echo "Monitoring $total_tokens tokens..."
    echo ""

    for token_name in "${tokens[@]}"; do
        echo "Checking: $token_name"

        local token_value="${!token_name:-}"

        if [ -z "$token_value" ]; then
            echo "  Status: MISSING"
            echo "  Warning: Token not found in environment"
        else
            echo "  Status: PRESENT"
            echo "  Length: ${#token_value} characters"

            # Basic expiry check (this is a simplified version)
            # In a real implementation, you'd decode JWTs or check external APIs
            if [[ "$token_value" == *"expired"* ]] || [[ "$token_value" == *"invalid"* ]]; then
                echo "  Expiry: EXPIRED"
                expired_tokens=$((expired_tokens  1))
            else
                echo "  Expiry: OK (simplified check)"
            fi
        fi

        checked_tokens=$((checked_tokens  1))
        echo ""
    done

    echo "Summary:"
    echo "  Total tokens checked: $checked_tokens"
    echo "  Expired tokens: $expired_tokens"
    echo "  Tokens expiring soon: $expiring_soon"

    # Log results
    {
        echo "$(date): Token monitoring completed"
        echo "Checked: $checked_tokens, Expired: $expired_tokens, Expiring soon: $expiring_soon"
    } >> logs/token_monitoring.log

    return 0
}

# Function to generate monitoring report
generate_report() {
    local report_file="reports/token_monitoring_report_$(date %Y%m%d_%H%M%S).md"

    echo "Generating Token Monitoring Report..."
    echo "Report saved to: $report_file"

    cat > "$report_file" << EOF
# Token Monitoring Report
Generated: $(date)

## Summary
This report contains the results of automated token expiry monitoring.

## Tokens Monitored
- AAR_TOKEN
- CI_BOT_TOKEN
- CI_ISSUE_AUTOMATION_TOKEN
- DEV_ORCHESTRATION_BOT_KEY
- PROD_ORCHESTRATION_BOT_KEY
- STAGING_ORCHESTRATION_BOT_KEY

## Status
All tokens were checked for basic availability and expiry status.
See logs/token_monitoring.log for detailed execution logs.

## Recommendations
- Review token expiry dates regularly
- Rotate tokens before expiry
- Monitor for unusual token usage patterns

---
*Report generated by token_expiry_monitor.sh*
EOF

    echo "Report generation completed."
    return 0
}

# Main script logic
case "${1:-}" in
    "monitor-all")
        monitor_all
        ;;
    "report")
        generate_report
        ;;
    *)
        echo "Usage: $0 {monitor-all|report}"
        echo "  monitor-all: Check all tokens for expiry"
        echo "  report: Generate monitoring report"
        exit 1
        ;;
esac