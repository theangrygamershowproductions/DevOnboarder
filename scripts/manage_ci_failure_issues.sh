#!/bin/bash
# Post-Merge Cleanup Issue Manager
# Handles GitHub issue operations for CI failure cleanup after merge
# Part of DevOnboarder CI Triage Guard System

set -euo pipefail

# Colors for output formatting - disabled in CI to prevent escape sequence issues
if [[ "${CI:-}" == "true" || "${GITHUB_ACTIONS:-}" == "true" ]]; then
    # Disable colors in CI environments
    readonly RED=''
    readonly GREEN=''
    readonly BLUE=''
    readonly YELLOW=''
    readonly NC=''
else
    readonly RED='\033[0;31m'
    readonly GREEN='\033[0;32m'
    readonly BLUE='\033[0;34m'
    readonly YELLOW='\033[1;33m'
    readonly NC='\033[0m' # No Color
fi

# Configuration
SCRIPT_NAME=$(basename "$0")
readonly SCRIPT_NAME
LOG_FILE="logs/${SCRIPT_NAME%.*}_$(date +%Y%m%d_%H%M%S).log"
readonly LOG_FILE

# Create logs directory and setup logging
mkdir -p logs
exec > >(tee -a "$LOG_FILE") 2>&1

echo "Post-Merge Cleanup Issue Manager starting at $(date)"
echo "Log file: $LOG_FILE"

# Function to display usage
usage() {
    echo "Usage: $0 <command> <pr_number>"
    echo ""
    echo "Commands:"
    echo "  list      - List open CI failure issues for PR"
    echo "  close     - Close CI failure issues for merged PR"
    echo "  comment   - Comment on CI failure issues with resolution"
    echo ""
    echo "Examples:"
    echo "  $0 list 1066"
    echo "  $0 close 1066"
    echo "  $0 comment 1066"
    exit 1
}

# Input validation
if [[ $# -ne 2 ]]; then
    usage
fi

readonly COMMAND="$1"
readonly PR_NUMBER="$2"

# Validate PR number
if [[ ! "$PR_NUMBER" =~ ^[0-9]+$ ]]; then
    echo "Error: Invalid PR number format: $PR_NUMBER"
    exit 1
fi

# Validate command
case "$COMMAND" in
    "list"|"close"|"comment")
        ;;
    *)
        echo "Error: Invalid command: $COMMAND"
        usage
        ;;
esac

echo "Processing $COMMAND operation for PR #$PR_NUMBER"

# Function to list CI failure issues
list_issues() {
    echo "Searching for CI failure issues related to PR #$PR_NUMBER..."

    if gh issue list \
        --label ci-failure \
        --state open \
        --search "CI Failure: PR #$PR_NUMBER" \
        --json number,title > temp_issues.json; then

        echo "${GREEN}SUCCESS: Issue search completed${NC}"

        # Check if any issues were found
        local issue_count
        issue_count=$(jq length temp_issues.json)

        if [[ "$issue_count" -eq 0 ]]; then
            echo "${YELLOW}INFO:  No open CI failure issues found for PR #$PR_NUMBER${NC}"
        else
            echo "${BLUE}LIST: Found $issue_count CI failure issue(s) for PR #$PR_NUMBER:${NC}"
            jq -r '.[] | "Issue #\(.number): \(.title)"' temp_issues.json
        fi

        rm -f temp_issues.json
        return 0
    else
        echo "${RED}FAILED: Failed to search for issues${NC}"
        rm -f temp_issues.json
        return 1
    fi
}

# Function to close CI failure issues
close_issues() {
    echo "Closing CI failure issues for merged PR #$PR_NUMBER..."

    # First list issues to get them
    if ! list_issues; then
        echo "Failed to list issues, cannot proceed with closure"
        return 1
    fi

    # Check if temp file exists and has content
    if [[ ! -f temp_issues.json ]]; then
        echo "No issues file found - searching again..."
        gh issue list \
            --label ci-failure \
            --state open \
            --search "CI Failure: PR #$PR_NUMBER" \
            --json number,title > temp_issues.json || return 1
    fi

    local issue_count
    issue_count=$(jq length temp_issues.json 2>/dev/null || echo "0")

    if [[ "$issue_count" -eq 0 ]]; then
        echo "${YELLOW}INFO:  No issues to close for PR #$PR_NUMBER${NC}"
        rm -f temp_issues.json
        return 0
    fi

    # Process each issue
    local closed_count=0
    while read -r issue_number; do
        if [[ -n "$issue_number" ]]; then
            echo "Closing issue #$issue_number..."

            # Create resolution comment
            cat > resolution_comment.md << EOF
# CI Failure Resolution - PR #$PR_NUMBER Merged

This CI failure issue has been resolved by the successful merge of PR #$PR_NUMBER.

## Resolution Details

- **Status:** Resolved SUCCESS:
- **Action:** PR successfully merged
- **Resolution Time:** $(date -Iseconds)
- **CI Triage:** Automatic cleanup via post-merge workflow

## Next Steps

Issue automatically closed as part of DevOnboarder CI Triage Guard system.

---

*This comment was automatically generated by the Post-Merge Cleanup workflow.*
EOF

            # Comment on issue
            if gh issue comment "$issue_number" --body-file resolution_comment.md; then
                echo "${GREEN}SUCCESS: Added resolution comment to issue #$issue_number${NC}"
            else
                echo "${RED}FAILED: Failed to comment on issue #$issue_number${NC}"
            fi

            # Close the issue (check if already closed first)
            current_state=$(gh issue view "$issue_number" --json state --jq .state 2>/dev/null || echo "unknown")
            if [[ "$current_state" == "unknown" ]]; then
                echo "${RED}FAILED: Could not determine state for issue #$issue_number, skipping close operation${NC}"
            elif [[ "$current_state" == "CLOSED" ]]; then
                echo "${YELLOW}INFO:  Issue #$issue_number already closed, skipping${NC}"
                ((closed_count++))
            elif gh issue close "$issue_number" --reason completed; then
                echo "${GREEN}SUCCESS: Closed issue #$issue_number${NC}"
                ((closed_count++))
            else
                echo "${RED}FAILED: Failed to close issue #$issue_number${NC}"
            fi

            rm -f resolution_comment.md
        fi
    done < <(jq -r '.[].number' temp_issues.json)

    echo "${BLUE}ðŸ“Š Summary: Closed $closed_count of $issue_count issues${NC}"
    rm -f temp_issues.json
    return 0
}

# Function to comment on issues
comment_issues() {
    echo "Adding resolution comments to CI failure issues for PR #$PR_NUMBER..."

    # Implementation similar to close_issues but only comments
    list_issues

    local issue_count
    issue_count=$(jq length temp_issues.json 2>/dev/null || echo "0")

    if [[ "$issue_count" -eq 0 ]]; then
        echo "${YELLOW}INFO:  No issues to comment on for PR #$PR_NUMBER${NC}"
        rm -f temp_issues.json
        return 0
    fi

    # Add resolution comments
    local commented_count=0
    while read -r issue_number; do
        if [[ -n "$issue_number" ]]; then
            echo "Adding resolution comment to issue #$issue_number..."

            cat > resolution_comment.md << EOF
# CI Failure Update - PR #$PR_NUMBER Status

This CI failure is being tracked as part of PR #$PR_NUMBER processing.

## Current Status

- **PR Number:** #$PR_NUMBER
- **Update Time:** $(date -Iseconds)
- **Tracking:** Active monitoring via CI Triage Guard
- **Resolution:** In progress

---

*This comment was automatically generated by the Post-Merge Cleanup workflow.*
EOF

            if gh issue comment "$issue_number" --body-file resolution_comment.md; then
                echo "${GREEN}SUCCESS: Added comment to issue #$issue_number${NC}"
                ((commented_count++))
            else
                echo "${RED}FAILED: Failed to comment on issue #$issue_number${NC}"
            fi

            rm -f resolution_comment.md
        fi
    done < <(jq -r '.[].number' temp_issues.json)

    echo "${BLUE}ðŸ“Š Summary: Commented on $commented_count of $issue_count issues${NC}"
    rm -f temp_issues.json
    return 0
}

# Execute command
case "$COMMAND" in
    "list")
        list_issues
        ;;
    "close")
        close_issues
        ;;
    "comment")
        comment_issues
        ;;
esac

echo "Post-merge cleanup issue operation completed at $(date)"

# Ensure script exits with success code when operations complete successfully
exit 0
