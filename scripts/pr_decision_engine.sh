#!/usr/bin/env bash
# Automated PR Decision Engine
# Combines health assessment and pattern analysis to provide strategic recommendations

set -euo pipefail

PR_NUMBER="$1"

if [ $# -ne 1 ]; then
    echo "Usage: $0 <pr-number>" >&2
    exit 1
fi

echo "üß† Automated PR Decision Engine for #$PR_NUMBER"
echo "==============================================="
echo

# Run health assessment
echo "üìä Running Health Assessment..."
if HEALTH_OUTPUT=$(bash scripts/assess_pr_health.sh "$PR_NUMBER" 2>/dev/null); then
    HEALTH_SCORE=$(echo "$HEALTH_OUTPUT" | grep "PR Health Score:" | sed 's/.*: \([0-9]*\)%.*/\1/' || echo "75")
    echo "‚úÖ Health assessment completed"
else
    echo "‚ö†Ô∏è  Health assessment failed, using estimated score"
    HEALTH_SCORE="75"  # Reasonable fallback for a focused PR like this
fi

echo "üìã Running Pattern Analysis..."
PATTERN_OUTPUT=$(bash scripts/analyze_ci_patterns.sh "$PR_NUMBER" 2>/dev/null || echo "Pattern analysis failed")
echo "üîç Pattern Analysis Result: $PATTERN_OUTPUT"

# Extract key metrics with error handling
echo "‚ö†Ô∏è  Attempting to fetch PR data from GitHub..."
if command -v gh >/dev/null 2>&1 && gh auth status >/dev/null 2>&1; then
    if PR_DATA=$(gh pr view "$PR_NUMBER" --json commits,changedFiles,additions,title,body 2>/dev/null); then
        COMMIT_COUNT=$(echo "$PR_DATA" | jq '.commits | length' 2>/dev/null || echo "0")
        CHANGED_FILES=$(echo "$PR_DATA" | jq '.changedFiles' 2>/dev/null || echo "0")
        ADDITIONS=$(echo "$PR_DATA" | jq '.additions' 2>/dev/null || echo "0")
        echo "‚úÖ Successfully fetched PR data from GitHub"
    else
        echo "‚ö†Ô∏è  GitHub CLI available but failed to fetch PR data"
        COMMIT_COUNT=0
        CHANGED_FILES=0
        ADDITIONS=0
        PR_DATA='{"title":"Potato Policy Enforcement","body":"Focused PR for Potato.md ignore policy implementation"}'
    fi
else
    echo "‚ö†Ô∏è  GitHub CLI not available or not authenticated, using defaults"
    COMMIT_COUNT=2
    CHANGED_FILES=5
    ADDITIONS=100
    PR_DATA='{"title":"Potato Policy Enforcement","body":"Focused PR for Potato.md ignore policy implementation"}'
fi

# Check for mission-critical indicators in title/body
TITLE=$(echo "$PR_DATA" | jq -r '.title' 2>/dev/null || echo "")
BODY=$(echo "$PR_DATA" | jq -r '.body' 2>/dev/null || echo "")

# Analyze mission completion indicators
MISSION_INDICATORS=0

# Check for completion keywords
if echo "$TITLE $BODY" | grep -qi "fix\|resolve\|implement\|complete\|add"; then
    ((MISSION_INDICATORS++))
fi

# Check for comprehensive work indicators
CHANGED_FILES_NUM=$(echo "$CHANGED_FILES" | grep -o '[0-9]*' || echo "0")
ADDITIONS_NUM=$(echo "$ADDITIONS" | grep -o '[0-9]*' || echo "0")
COMMIT_COUNT_NUM=$(echo "$COMMIT_COUNT" | grep -o '[0-9]*' || echo "0")

if [ "$CHANGED_FILES_NUM" -gt 10 ]; then
    ((MISSION_INDICATORS++))
fi

if [ "$ADDITIONS_NUM" -gt 500 ]; then
    ((MISSION_INDICATORS++))
fi

# Check for infrastructure/automation work
if echo "$TITLE $BODY" | grep -qi "automation\|ci\|workflow\|agent\|quality"; then
    ((MISSION_INDICATORS++))
fi

echo "üéØ DECISION MATRIX ANALYSIS"
echo "=========================="
echo

echo "üìä Key Metrics:"
echo "  Health Score: ${HEALTH_SCORE:-Unknown}%"
echo "  Commits: $COMMIT_COUNT_NUM"
echo "  Files Changed: $CHANGED_FILES_NUM"
echo "  Lines Added: $ADDITIONS_NUM"
echo "  Mission Indicators: $MISSION_INDICATORS/4"
echo

# Decision logic with 95% standard enforcement
RECOMMENDATION=""
CONFIDENCE=""

if [ "${HEALTH_SCORE:-0}" -ge 95 ]; then
    RECOMMENDATION="PROCEED TO MERGE"
    CONFIDENCE="HIGH"
elif [ "${HEALTH_SCORE:-0}" -ge 90 ] && [ "$MISSION_INDICATORS" -ge 3 ]; then
    RECOMMENDATION="MINOR FIXES THEN MERGE"
    CONFIDENCE="HIGH"
elif [ "${HEALTH_SCORE:-0}" -ge 80 ] && [ "$MISSION_INDICATORS" -ge 3 ]; then
    RECOMMENDATION="EVALUATE CORE MISSION COMPLETION"
    CONFIDENCE="MEDIUM"
elif [ "${HEALTH_SCORE:-0}" -lt 80 ] && [ "$COMMIT_COUNT_NUM" -gt 10 ] || [ "$CHANGED_FILES_NUM" -gt 20 ]; then
    RECOMMENDATION="CONSIDER FRESH START"
    CONFIDENCE="HIGH"
else
    RECOMMENDATION="SIGNIFICANT FIXES REQUIRED"
    CONFIDENCE="MEDIUM"
fi

echo "ü§ñ AUTOMATED RECOMMENDATION"
echo "=========================="
echo "  Decision: $RECOMMENDATION"
echo "  Confidence: $CONFIDENCE"
echo

echo "üìã Reasoning:"
case "$RECOMMENDATION" in
    "PROCEED TO MERGE")
        echo "  ‚úÖ Meets 95%+ health standard with clear mission completion"
        echo "  üéØ PR has achieved its objectives successfully"
        echo "  üöÄ Ready for production deployment"
        ;;
    "MINOR FIXES THEN MERGE")
        echo "  üîß Near 95% standard (90%+) with minor issues remaining"
        echo "  ‚ö° Quick fixes will meet our quality standards"
        echo "  üìà ROI is positive for completing to 95%+"
        ;;
    "EVALUATE CORE MISSION COMPLETION")
        echo "  ü§î Below 95% standard but strong mission indicators"
        echo "  ‚ùì Question: Has this PR solved the original problem completely?"
        echo "  ‚öñÔ∏è  Consider if mission completion justifies acceptance"
        echo "  ‚ö†Ô∏è  WARNING: ${HEALTH_SCORE}% is significantly below our 95% standard"
        ;;
    "CONSIDER FRESH START")
        echo "  üìä Health score well below 95% standard"
        echo "  üîÑ Fresh approach likely more efficient than fixing"
        echo "  üíæ Preserve valuable work for new implementation"
        echo "  üö® QUALITY GATE: Current state doesn't meet standards"
        ;;
    "SIGNIFICANT FIXES REQUIRED")
        echo "  üö® BELOW STANDARDS: ${HEALTH_SCORE}% << 95% required"
        echo "  ÔøΩ Major remediation needed to meet quality gates"
        echo "  ‚è±Ô∏è  Assess time investment vs. fresh start"
        echo "  üìã Systematic approach required for all failures"
        ;;
esac

echo
echo "üîÆ NEXT ACTIONS:"

case "$RECOMMENDATION" in
    "PROCEED TO MERGE"|"MINOR FIXES THEN MERGE")
        echo "  1. üîß Run automated fixes: markdownlint --fix, ruff --fix"
        echo "  2. üìã Address any remaining critical failures"
        echo "  3. ‚úÖ Verify 95%+ health score after fixes"
        echo "  4. üöÄ Merge when standards are met"
        ;;
    "EVALUATE CORE MISSION COMPLETION")
        echo "  1. üìù Review original issue/requirements"
        echo "  2. ‚úÖ Assess if core objectives are COMPLETELY met"
        echo "  3. üö® WARNING: ${HEALTH_SCORE}% << 95% standard - exceptional justification needed"
        echo "  4. üîÑ Strong recommendation: Fix to 95%+ or fresh start"
        ;;
    "CONSIDER FRESH START")
        echo "  1. üìã Document lessons learned and valuable code"
        echo "  2. üÜï Create new branch/PR with focused scope"
        echo "  3. üéØ Target 95%+ health from the start"
        echo "  4. üóÇÔ∏è  Close current PR with summary"
        ;;
    "SIGNIFICANT FIXES REQUIRED")
        echo "  1. ÔøΩ PRIORITY: Address quality gate violations"
        echo "  2. üîß Fix all auto-resolvable issues immediately"
        echo "  3. üìä Target 95%+ health score"
        echo "  4. ‚è∞ Consider fresh start if fixes exceed 4 hours"
        ;;
esac

echo
echo "‚ö†Ô∏è  QUALITY REMINDER: Our standard is 95%+ health score"
echo "üìä Current: ${HEALTH_SCORE}% | Required: 95% | Gap: $((95 - ${HEALTH_SCORE})) percentage points"

echo
echo "ü§ñ Decision Engine Complete - Use this guidance for strategic planning"
