# docker-compose.dev.yaml â€” DevOnboarder Development v1.0.0
# Production-ready development environment with Traefik reverse proxy
# version: "3.9"

services:
  # Traefik Reverse Proxy
  traefik:
    image: traefik:v3.3.6
    container_name: devonboarder-traefik-dev
    hostname: devonboarder-traefik-dev
    restart: always
    command:
      - "--config=/etc/traefik/traefik.yml"
    environment:
      - CF_DNS_API_TOKEN=${CF_DNS_API_TOKEN:-}
    ports:
      - "80:80"
      - "443:443"
      - "8090:8080"  # Traefik dashboard
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik/traefik.yml:/etc/traefik/traefik.yml:ro
      - ./traefik/dynamic.yml:/etc/traefik/dynamic/dynamic.yml:ro
      - ./letsencrypt:/letsencrypt
    expose:
      - 8443
      - 80
      - 443
    networks:
      - edge_tier
      - api_tier  # Connect to API services for routing
      - auth_tier # Connect to auth services for routing
    labels:
      - "traefik.enable=false"

  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: devonboarder-db-dev
    restart: always
    environment:
      POSTGRES_USER: devuser
      POSTGRES_PASSWORD: devpass
      POSTGRES_DB: devonboarder_dev
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    networks:
      - data_tier
      - auth_tier  # Allow auth services to access database
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U devuser -d devonboarder_dev"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Auth Service (Port 8002)
  auth-service:
    container_name: devonboarder-auth-dev
    hostname: auth-service
    restart: always
    depends_on:
      db:
        condition: service_healthy
      traefik:
        condition: service_started
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    working_dir: /app
    env_file:
      - .env.dev
    volumes:
      - ./src:/app/src
      - ./logs:/app/logs
      - ./.env.dev:/app/.env.dev:ro
    networks:
      - auth_tier
      - data_tier  # Access to database
    command: ["devonboarder-auth"]
    expose:
      - 8002
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 15s
      timeout: 5s
      retries: 10
      start_period: 30s
    labels:
      - "traefik.enable=true"
      # Host-based routing for subdomain architecture
      - "traefik.http.routers.auth-host.rule=Host(`auth.theangrygamershow.com`)"
      - "traefik.http.routers.auth-host.entrypoints=web"
      - "traefik.http.routers.auth-host.service=auth-dev"
      - "traefik.http.routers.auth-host.middlewares=cors-header@file"
      - "traefik.http.routers.auth-host.priority=200"
      # Path-based routing for /login routes (OAuth flow) - HIGH PRIORITY
      - "traefik.http.routers.auth-login.rule=PathPrefix(`/login`)"
      - "traefik.http.routers.auth-login.entrypoints=web"
      - "traefik.http.routers.auth-login.service=auth-dev"
      - "traefik.http.routers.auth-login.middlewares=cors-header@file"
      - "traefik.http.routers.auth-login.priority=200"
      # Path-based routing for /api routes (API endpoints) - HIGH PRIORITY
      - "traefik.http.routers.auth-api.rule=PathPrefix(`/api`)"
      - "traefik.http.routers.auth-api.entrypoints=web"
      - "traefik.http.routers.auth-api.service=auth-dev"
      - "traefik.http.routers.auth-api.middlewares=cors-header@file"
      - "traefik.http.routers.auth-api.priority=180"
      # Path-based routing for /auth routes (legacy) - MEDIUM PRIORITY
      - "traefik.http.routers.auth-dev.rule=PathPrefix(`/auth`)"
      - "traefik.http.routers.auth-dev.entrypoints=web"
      - "traefik.http.services.auth-dev.loadbalancer.server.port=8002"
      - "traefik.http.routers.auth-dev.middlewares=stripprefix-auth@file,cors-header@file"
      - "traefik.http.routers.auth-dev.priority=100"

  # XP API Service (Port 8001)
  backend:
    container_name: devonboarder-xp-dev
    hostname: backend
    restart: always
    depends_on:
      db:
        condition: service_healthy
      auth-service:
        condition: service_healthy
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    working_dir: /app
    env_file:
      - .env.dev
    volumes:
      - ./src:/app/src
      - ./logs:/app/logs
      - ./.env.dev:/app/.env.dev:ro
    networks:
      - api_tier
      - auth_tier  # Access to auth services
    command: ["devonboarder-api"]
    expose:
      - 8001
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 15s
      timeout: 5s
      retries: 10
      start_period: 30s
    labels:
      - "traefik.enable=true"
      # Host-based routing for subdomain architecture
      - "traefik.http.routers.api-host.rule=Host(`api.theangrygamershow.com`)"
      - "traefik.http.routers.api-host.entrypoints=web"
      - "traefik.http.routers.api-host.service=xp-dev"
      - "traefik.http.routers.api-host.middlewares=cors-header@file"
      - "traefik.http.routers.api-host.priority=200"
      # Path-based routing (legacy)
      - "traefik.http.routers.xp-dev.rule=PathPrefix(`/api`)"
      - "traefik.http.routers.xp-dev.entrypoints=web"
      - "traefik.http.services.xp-dev.loadbalancer.server.port=8001"
      - "traefik.http.routers.xp-dev.middlewares=stripprefix-api@file,cors-header@file"
      - "traefik.http.routers.xp-dev.priority=100"

  # Discord Integration Service (Port 8081)
  discord-integration:
    container_name: devonboarder-discord-dev
    hostname: discord-integration
    restart: always
    depends_on:
      db:
        condition: service_healthy
      auth-service:
        condition: service_healthy
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    working_dir: /app
    env_file:
      - .env.dev
    volumes:
      - ./src:/app/src
      - ./logs:/app/logs
      - ./.env.dev:/app/.env.dev:ro
    networks:
      - api_tier
      - auth_tier  # Access to auth services
    command: ["devonboarder-integration"]
    expose:
      - 8081
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/health"]
      interval: 15s
      timeout: 5s
      retries: 10
      start_period: 30s
    labels:
      - "traefik.enable=true"
      # Host-based routing for subdomain architecture
      - "traefik.http.routers.discord-host.rule=Host(`discord.theangrygamershow.com`)"
      - "traefik.http.routers.discord-host.entrypoints=web"
      - "traefik.http.routers.discord-host.service=discord-dev"
      - "traefik.http.routers.discord-host.middlewares=cors-header@file"
      - "traefik.http.routers.discord-host.priority=200"
      # Path-based routing (legacy)
      - "traefik.http.routers.discord-dev.rule=PathPrefix(`/discord`)"
      - "traefik.http.routers.discord-dev.entrypoints=web"
      - "traefik.http.services.discord-dev.loadbalancer.server.port=8081"
      - "traefik.http.routers.discord-dev.middlewares=stripprefix-discord@file,cors-header@file"
      - "traefik.http.routers.discord-dev.priority=100"

  # Discord Bot Service
  # Note: Uses custom health check script (not HTTP) since bot doesn't expose endpoints
  # See docs/troubleshooting/DISCORD_BOT_HEALTH_CHECK_FIX.md for health check issues
  bot:
    container_name: devonboarder-bot-dev
    hostname: devonboarder-bot-dev
    restart: always
    depends_on:
      auth-service:
        condition: service_healthy
      backend:
        condition: service_healthy
    build:
      context: .
      dockerfile: bot/Dockerfile.dev
    working_dir: /app
    env_file:
      - .env.dev
    volumes:
      - ./bot/src:/app/src
      - ./bot/package.json:/app/package.json
      - ./bot/tsconfig.json:/app/tsconfig.json
      - ./docs:/docs
      - ./logs/bot:/app/logs
      - ./.env.dev:/app/.env:ro
    networks:
      - api_tier
      - auth_tier  # Access to auth services
    command: npm run dev
    expose:
      - 8080
    labels:
      - "traefik.enable=false"  # Bot doesn't need web access

  # Frontend Service (Port 3000)
  frontend:
    container_name: devonboarder-frontend-dev
    hostname: frontend
    restart: always
    depends_on:
      auth-service:
        condition: service_healthy
      backend:
        condition: service_healthy
      discord-integration:
        condition: service_healthy
    build:
      context: .
      dockerfile: frontend/Dockerfile.dev
    working_dir: /app
    env_file:
      - .env.dev
    volumes:
      - ./frontend/src:/app/src
      - ./frontend/public:/app/public
      - ./frontend/package.json:/app/package.json
      - ./frontend/vite.config.ts:/app/vite.config.ts
      - ./.env.dev:/app/.env.dev:ro
    networks:
      - edge_tier
      - api_tier   # Access to API services
      - auth_tier  # Access to auth services
    command: npm run dev -- --host 0.0.0.0
    expose:
      - 3000
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 60s
    labels:
      - "traefik.enable=true"
      # Host-based routing for subdomain architecture
      - "traefik.http.routers.frontend-host.rule=Host(`dev.theangrygamershow.com`)"
      - "traefik.http.routers.frontend-host.entrypoints=web"
      - "traefik.http.routers.frontend-host.service=frontend-dev"
      - "traefik.http.routers.frontend-host.middlewares=cors-header@file"
      - "traefik.http.routers.frontend-host.priority=200"
      # Path-based routing (legacy/local) - HIGH priority for SPA routing
      - "traefik.http.routers.frontend-dev.rule=PathPrefix(`/`)"
      - "traefik.http.routers.frontend-dev.entrypoints=web"
      - "traefik.http.services.frontend-dev.loadbalancer.server.port=3000"
      - "traefik.http.routers.frontend-dev.middlewares=cors-header@file"
      - "traefik.http.routers.frontend-dev.priority=50"

  # Dashboard Service (Port 8003)
  dashboard-service:
    container_name: devonboarder-dashboard-dev
    hostname: dashboard-service
    restart: always
    depends_on:
      auth-service:
        condition: service_healthy
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    working_dir: /app
    env_file:
      - .env.dev
    environment:
      # Docker networking: bind to all interfaces within container network
      # This is secure because the port is only exposed within Docker network
      DASHBOARD_HOST: "0.0.0.0"
    volumes:
      - ./src:/app/src
      - ./scripts:/app/scripts
      - ./logs:/app/logs
      - ./.env.dev:/app/.env.dev:ro
    networks:
      - api_tier
      - auth_tier  # Access to auth services
    command: ["python", "-m", "devonboarder.dashboard_service"]
    expose:
      - 8003
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
      interval: 15s
      timeout: 5s
      retries: 10
      start_period: 30s
    labels:
      - "traefik.enable=true"
      # Host-based routing for subdomain architecture
      - "traefik.http.routers.dashboard-host.rule=Host(`dashboard.theangrygamershow.com`)"
      - "traefik.http.routers.dashboard-host.entrypoints=web"
      - "traefik.http.routers.dashboard-host.service=dashboard-dev"
      - "traefik.http.routers.dashboard-host.middlewares=cors-header@file"
      - "traefik.http.routers.dashboard-host.priority=200"
      # Disable path-based routing to avoid conflicts with frontend
      # - "traefik.http.routers.dashboard-dev.rule=PathPrefix(`/api/dashboard-service`)"
      # - "traefik.http.routers.dashboard-dev.entrypoints=web"
      - "traefik.http.services.dashboard-dev.loadbalancer.server.port=8003"
      - "traefik.http.services.dashboard-dev.loadbalancer.server.url=http://dashboard-service:8003"
      # - "traefik.http.routers.dashboard-dev.middlewares=stripprefix-dashboard-service@file,cors-header@file"
      # - "traefik.http.routers.dashboard-dev.priority=150"

  # Cloudflare Tunnel - Multi-Subdomain Configuration
  cloudflare-tunnel:
    image: cloudflare/cloudflared:latest
    container_name: devonboarder-tunnel-dev
    hostname: devonboarder-tunnel-dev
    restart: unless-stopped
    command: tunnel --config /etc/cloudflared/config.yml run
    environment:
      - TUNNEL_ID=ac65c0eb-6e16-4444-b340-feb89e45d991
    volumes:
      - ./config/cloudflare/tunnel-config.yml:/etc/cloudflared/config.yml:ro
      - ./cloudflared/ac65c0eb-6e16-4444-b340-feb89e45d991.json:/etc/cloudflared/ac65c0eb-6e16-4444-b340-feb89e45d991.json:ro
    depends_on:
      auth-service:
        condition: service_healthy
      backend:
        condition: service_healthy
      discord-integration:
        condition: service_healthy
      dashboard-service:
        condition: service_healthy
      frontend:
        condition: service_healthy
    labels:
      - "traefik.enable=false"
    networks:
      - edge_tier
      - api_tier   # Access to API services for tunnel routing
      - auth_tier  # Access to auth services for tunnel routing
    profiles:
      - tunnel  # Only start with --profile tunnel
    healthcheck:
      test: ["CMD", "cloudflared", "--help"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # AAR UI Service
  aar-ui:
    build:
      context: .
      dockerfile: app/aar-ui/Dockerfile
    image: devonboarder/aar-ui:dev
    container_name: devonboarder-aar-ui-dev
    hostname: aar-ui.devonboarder.local
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - AAR_UI_PORT=3000
      - CORS_ORIGINS=https://aar.theangrygamershow.com,http://localhost:5174
    networks:
      - edge_tier
      - api_tier  # Access to other API services if needed
    volumes:
      - ./docs/AAR:/app/docs/AAR
      - ./logs:/app/logs
    depends_on:
      - traefik
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=devonboarder_edge_tier"

      # Main AAR UI routing
      - "traefik.http.routers.aar-ui.rule=Host(`aar.theangrygamershow.com`)"
      - "traefik.http.routers.aar-ui.entrypoints=websecure"
      - "traefik.http.routers.aar-ui.tls=true"
      - "traefik.http.routers.aar-ui.service=aar-ui"

      # Service configuration
      - "traefik.http.services.aar-ui.loadbalancer.server.port=3000"
      - "traefik.http.services.aar-ui.loadbalancer.healthcheck.path=/api/health"
      - "traefik.http.services.aar-ui.loadbalancer.healthcheck.interval=30s"

      # Optional: redirect www to apex
      - "traefik.http.routers.aar-ui-www.rule=Host(`www.aar.theangrygamershow.com`)"
      - "traefik.http.routers.aar-ui-www.middlewares=www-to-apex"
      - "traefik.http.routers.aar-ui-www.entrypoints=websecure"
      - "traefik.http.routers.aar-ui-www.tls=true"

      # Middleware for www redirect
      - "traefik.http.middlewares.www-to-apex.redirectregex.regex=^https://www\\.(.+)"
      - "traefik.http.middlewares.www-to-apex.redirectregex.replacement=https://$${1}"
      - "traefik.http.middlewares.www-to-apex.redirectregex.permanent=true"
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s

  # Debug Tools
  debug-tools:
    image: nicolaka/netshoot:latest
    container_name: devonboarder-debug-tools
    command: sleep infinity
    depends_on:
      - traefik
    labels:
      - "traefik.enable=false"
    networks:
      - edge_tier
      - api_tier
      - auth_tier
      - data_tier  # Debug access to all tiers for troubleshooting
    profiles:
      - debug  # Only start with --profile debug

volumes:
  postgres_data:
    name: devonboarder_postgres_data

networks:
  # Docker Service Mesh Phase 1: Tiered Network Architecture
  auth_tier:
    name: devonboarder_auth_tier
    driver: bridge
    labels:
      - "devonboarder.network.tier=auth"
      - "devonboarder.network.phase=1"
      - "devonboarder.network.purpose=authentication-authorization"

  api_tier:
    name: devonboarder_api_tier
    driver: bridge
    labels:
      - "devonboarder.network.tier=api"
      - "devonboarder.network.phase=1"
      - "devonboarder.network.purpose=business-logic-services"

  data_tier:
    name: devonboarder_data_tier
    driver: bridge
    labels:
      - "devonboarder.network.tier=data"
      - "devonboarder.network.phase=1"
      - "devonboarder.network.purpose=data-persistence"

  edge_tier:
    name: devonboarder_edge_tier
    driver: bridge
    labels:
      - "devonboarder.network.tier=edge"
      - "devonboarder.network.phase=1"
      - "devonboarder.network.purpose=external-access"

  # Legacy network for backwards compatibility (Phase 1 transition)
  devonboarder_network:
    name: devonboarder_network
    driver: bridge
