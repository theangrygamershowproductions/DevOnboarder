{
  "tasks": [
    {
      "id": "feedback-002",
      "title": "Create Feedback Dashboard UI",
      "module": "frontend",
      "description": "Build React components for the submission form, status board, and analytics snapshot per docs/prd/feedback-dashboard.md.",
      "status": "planned",
      "milestone": "v0.5.0"
    },
    {
      "id": "agile-001",
      "title": "Llama2 Agile Helper Integration",
      "module": "llama2_agile_helper",
      "description": "Provide sprint summaries and backlog grooming tips.",
      "status": "planned",
      "milestone": "v0.5.0"
    },
    {
      "id": "docs-qa-101",
      "title": "Document pip-audit enforcement in CI workflow",
      "module": "docs",
      "description": "Update docs/ci-workflow.md to explain the pip-audit step, failure behavior, and offline mitigation instructions.",
      "status": "planned",
      "milestone": "v0.5.1"
    },
    {
      "id": "docs-qa-102",
      "title": "Add markdownlint offline guidance to onboarding",
      "module": "docs",
      "description": "Extend docs/doc-quality-onboarding.md with instructions for running markdownlint-cli2 offline and reference docs/offline-setup.md.",
      "status": "planned",
      "milestone": "v0.5.1"
    }
  ],
  "completedTasks": [
    {
      "id": "feedback-001",
      "title": "Implement Feedback Dashboard API",
      "module": "feedback_service",
      "description": "Add endpoints for submitting feedback, tracking status, and generating analytics as outlined in docs/prd/feedback-dashboard.md.",
      "status": "complete"
    },
    {
      "id": "integration-001",
      "title": "Implement Discord Integration agent",
      "module": "discord_integration",
      "description": "Create `/oauth` and `/roles` routes for Discord account linking and role lookup.",
      "status": "complete"
    },
    {
      "id": "auth-001",
      "title": "Implement Discord OAuth2 Flow",
      "module": "auth_service",
      "description": "Add Discord login support using DISCORD_CLIENT_ID and DISCORD_CLIENT_SECRET from the .env. Create `/api/auth/discord/login` and `/api/auth/discord/callback` endpoints to complete the flow. Store the Discord user data in the existing User model and issue a JWT on success.",
      "status": "complete"
    },
    {
      "id": "bot-001",
      "title": "Fix XP API Fetch Calls in Bot",
      "module": "discord_bot",
      "description": "Update `src/api.ts` to include `username` or token when calling `/api/user/level`, `/api/user/onboarding-status`, and other endpoints. Currently, requests return 422 errors due to missing required parameters.",
      "status": "complete"
    },
    {
      "id": "xp-001",
      "title": "Add Contribution POST Endpoint",
      "module": "xp_api",
      "description": "Create a new POST route at `/api/user/contribute` that accepts a contribution event, awards XP, and stores the record in the Contribution and XPEvent models. This will support XP gain via bot commands like `/contribute`.",
      "status": "complete"
    },
    {
      "id": "bot-002",
      "title": "Modularize Discord Bot Commands",
      "module": "discord_bot",
      "description": "Refactor `/verify`, `/profile`, and `/contribute` commands out of `index.ts` and into separate files in a new `/commands` folder. Implement dynamic loading and registration of commands based on Discord.js v14 or your current bot handler.",
      "status": "complete"
    },
    {
      "id": "frontend-001",
      "title": "Stub Frontend OAuth Session Component",
      "module": "frontend",
      "description": "Add a simple React/Vite component that consumes the Discord OAuth token (if present), displays XP/level via `/api/user/level`, and shows onboarding state. Use environment variables defined in `.env.example` and align with backend API routes.",
      "status": "complete"
    }
  ]
}
