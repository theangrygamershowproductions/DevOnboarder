version: 1
org: theangrygamershowproductions
project: DevOnboarder
permissions_matrix: .codex/bot-permissions.yaml

environments:
  dev:
    default_branch: main
    triggers: [workflow_dispatch, push, pull_request]
    caching:
      python_deps: .venv
      node_deps: aar/node_modules
      version_policy: scripts/enforce_version_policy.sh
  staging:
    default_branch: main
    triggers: [schedule]
    schedule: "0 */6 * * *"
    caching:
      python_deps: .venv
      node_deps: aar/node_modules
  prod:
    default_branch: main
    triggers: [release, manual_approval]
    caching:
      python_deps: .venv
      node_deps: aar/node_modules

routing:
  - if: event == "pull_request" && label ~ "codex:route"
    run: [codex_router]
  - if: event == "pull_request" && !(label ~ "codex:route")
    run: [codex_triage]
  - if: event == "workflow_run" && job == "tests" && status == "failure"
    run: [ci_triage_guard, coverage_orchestrator]
  - if: event == "schedule"
    run: [coverage_orchestrator]
  - if: event == "push" && file ~ "\.nvmrc|\.python-version|\.tool-versions"
    run: [version_policy_enforcer]

agents:
  codex_router:
    ref: ./.codex/agents/tags/codex_router/agent_tags_codex_router.md
    secrets: [CODEX_API_KEY]
    permissions: [route_agents, create_issue, apply_labels]
  codex_triage:
    ref: ./.codex/agents/tags/codex_triage/agent_tags_codex_triage.md
    permissions: [create_issue, apply_labels]
  coverage_orchestrator:
    ref: ./.codex/agents/tags/coverage_orchestrator/agent_tags_coverage_orchestrator.md
    secrets: [CODEX_API_KEY]
    permissions: [read_ci_logs, open_pr]
  ci_triage_guard:
    ref: ./.codex/agents/tags/ci_triage_guard/agent_tags_ci_triage_guard.md
    permissions: [block_generation]
  version_policy_enforcer:
    ref: ./.codex/agents/version-policy-enforcer.md
    permissions: [validate_versions, block_deployment]

policies:
  node_version: "22.x"
  python_version: "3.12.x"
  version_enforcement: strict
  forbid: [curl_pipe_sh, remote_code_exec, emoji_terminal_output]
  require: [lockfile_integrity, gh_version>=2.0.0, virtual_env_usage]
  terminal_output: ascii_only
  quality_gates:
    coverage_threshold: 95
    test_timeout: 30000
    linting: mandatory

artifacts:
  logs_dir: logs/
  reports_dir: reports/
  cache_strategy: environment_specific

caching:
  python:
    key: "${{ runner.os }}-python-3.12-${{ hashFiles('pyproject.toml') }}"
    paths:
      - .venv
    restore_keys:
      - "${{ runner.os }}-python-3.12-"
  node:
    key: "${{ runner.os }}-node-22-${{ hashFiles('aar/package-lock.json') }}"
    paths:
      - aar/node_modules
    restore_keys:
      - "${{ runner.os }}-node-22-"
