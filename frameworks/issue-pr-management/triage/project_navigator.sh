#!/bin/bash
# DevOnboarder Project Navigator - Minimum Viable Navigator (MVN)
# Phase 1: Constrained experiment for Issue Management + CI Troubleshooting
#
# Purpose: Provide focused, context-aware entry points to reduce conversation overhead
# Scope: Bounded experiment to prove value before universal expansion

set -euo pipefail

# Configuration
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
LOGS_DIR="${SCRIPT_DIR}/../logs"

# Create logs directory if it doesn't exist
mkdir -p "${LOGS_DIR}"
chmod 755 "${LOGS_DIR}"

# Navigation session logging
SESSION_LOG="${LOGS_DIR}/navigation_session_$(date +%Y%m%d_%H%M%S).log"

log_action() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1" | tee -a "${SESSION_LOG}"
}

# CRITICAL: Branch workflow validation to prevent main branch work
check_branch_workflow() {
    local current_branch
    current_branch=$(git branch --show-current 2>/dev/null || echo "unknown")

    if [[ "$current_branch" == "main" ]]; then
        echo
        echo "üö® CRITICAL WORKFLOW VIOLATION DETECTED!"
        echo "========================================"
        echo
        echo "‚ùå You are on the 'main' branch"
        echo "‚úÖ DevOnboarder requires feature branch workflow"
        echo
        echo "üìã Proper DevOnboarder workflow:"
        echo "   1. git checkout main"
        echo "   2. git pull origin main"
        echo "   3. git checkout -b feat/descriptive-name"
        echo "   4. Then start work"
        echo
        echo "üîß Auto-fix options:"
        echo "   [1] Create feature branch now (recommended)"
        echo "   [2] Continue on main (VIOLATION - not recommended)"
        echo "   [3] Exit and fix manually"
        echo
        read -r -p "Choose option [1-3]: " branch_choice

        case $branch_choice in
            1)
                echo
                read -r -p "Enter feature branch name (feat/): " branch_name
                if [[ -n "$branch_name" ]]; then
                    full_branch_name="feat/$branch_name"
                    if git checkout -b "$full_branch_name" 2>/dev/null; then
                        echo "‚úÖ Created and switched to branch: $full_branch_name"
                        log_action "Branch workflow violation corrected: created $full_branch_name"
                    else
                        echo "‚ùå Failed to create branch. Exiting for manual fix."
                        exit 1
                    fi
                else
                    echo "‚ùå No branch name provided. Exiting for manual fix."
                    exit 1
                fi
                ;;
            2)
                echo
                echo "‚ö†Ô∏è  WARNING: Continuing on main branch violates DevOnboarder workflow"
                echo "   This should only be used for emergency fixes"
                log_action "Branch workflow violation: user chose to continue on main"
                ;;
            3)
                echo "Exiting for manual branch creation..."
                exit 0
                ;;
            *)
                echo "Invalid option. Exiting for manual fix."
                exit 1
                ;;
        esac
        echo
    else
        echo "‚úÖ Branch workflow compliance: Working on '$current_branch'"
        log_action "Branch workflow check passed: on branch $current_branch"
    fi
}

# Display main navigation menu
show_main_menu() {
    clear
    echo "=================================="
    echo "üè† DevOnboarder Navigator (MVN)"
    echo "=================================="
    echo
    echo "Phase 1 Experiment: Issue Management + CI Focus"
    echo
    echo "Select your focus area:"
    echo
    echo "  [1] üìã Issue Management"
    echo "      Sprint operations, triage, GitHub issues"
    echo
    echo "  [2] üîß CI/CD Troubleshooting"
    echo "      Pipeline failures, quality gates, service issues"
    echo
    echo "  [9] üìä Navigation Metrics"
    echo "      View MVN experiment results"
    echo
    echo "  [0] Exit"
    echo
    echo "=================================="
}

# Load context for Issue Management
load_issue_management_context() {
    log_action "Loading Issue Management context"
    echo
    echo "üéØ ISSUE MANAGEMENT CONTEXT LOADED"
    echo "=================================="
    echo
    echo "üìä Current State:"
    echo "‚Ä¢ 63 total issues analyzed and organized"
    echo "‚Ä¢ 100% priority labeling complete (18 High, 32 Medium, 13 Low)"
    echo "‚Ä¢ Strategic milestones: 5 milestones with 37 issue assignments"
    echo "‚Ä¢ Sprint 1: COMPLETE (Issues #1437, #1315 resolved)"
    echo
    echo "üéØ Active Framework:"
    echo "‚Ä¢ Strategic Planning Framework v1.0.0"
    echo "‚Ä¢ Issue Management Initiative - Administrative Triage COMPLETE"
    echo
    echo "üìã Common Tasks:"
    echo "‚Ä¢ Sprint execution and monitoring"
    echo "‚Ä¢ Issue triage operations"
    echo "‚Ä¢ Priority labeling and milestone assignment"
    echo "‚Ä¢ Administrative reporting"
    echo
    echo "üîó Key Files:"
    echo "‚Ä¢ docs/initiatives/github-issue-management/administrative_triage_summary.md"
    echo "‚Ä¢ scripts/analyze_issue_triage.py"
    echo "‚Ä¢ logs/administrative_triage_analysis.md"
    echo
    echo "‚ñ∂Ô∏è Ready for focused Issue Management conversation"
    echo "   Context pre-loaded - no need to re-explain project structure"
    echo
    read -r -p "Press Enter to continue with AI conversation..."
}

# Load context for CI Troubleshooting
load_ci_troubleshooting_context() {
    log_action "Loading CI/CD Troubleshooting context"
    echo
    echo "üîß CI/CD TROUBLESHOOTING CONTEXT LOADED"
    echo "======================================="
    echo
    echo "‚öôÔ∏è Quality Standards:"
    echo "‚Ä¢ 95% quality threshold across 8 metrics"
    echo "‚Ä¢ Test Coverage: Backend 96%+, Bot 100%, Frontend 100%"
    echo "‚Ä¢ Virtual environment MANDATORY for all operations"
    echo
    echo "üèóÔ∏è Service Architecture:"
    echo "‚Ä¢ 8 services: DevOnboarder (8000), XP API (8001), Auth (8002),"
    echo "  Dashboard (8003), Integration (8081), PostgreSQL (5432)"
    echo "‚Ä¢ Docker-based multi-service environment"
    echo "‚Ä¢ Environment: .venv required, Node.js 22, Python 3.12"
    echo
    echo "üîç Common Issues:"
    echo "‚Ä¢ CI pipeline failures and GitHub Actions debugging"
    echo "‚Ä¢ Test coverage validation and quality gate failures"
    echo "‚Ä¢ Service connectivity and Docker environment issues"
    echo "‚Ä¢ Terminal output compliance (ZERO TOLERANCE for violations)"
    echo
    echo "üõ†Ô∏è Key Tools:"
    echo "‚Ä¢ scripts/qc_pre_push.sh - 95% quality validation"
    echo "‚Ä¢ scripts/run_tests.sh - comprehensive test runner"
    echo "‚Ä¢ scripts/safe_commit.sh - NEVER use git commit directly"
    echo
    echo "‚ñ∂Ô∏è Ready for focused CI/CD troubleshooting conversation"
    echo "   Architecture and standards pre-loaded"
    echo
    read -r -p "Press Enter to continue with AI conversation..."
}

# Show navigation metrics for MVN experiment
show_navigation_metrics() {
    log_action "Viewing navigation metrics"
    echo
    echo "üìä MVN EXPERIMENT METRICS"
    echo "========================"
    echo
    echo "üß™ Phase 1 Results:"
    echo "‚Ä¢ Navigation sessions: $(find "${LOGS_DIR}" -name "navigation_session_*.log" | wc -l)"
    echo "‚Ä¢ Issue Management focus sessions: $(grep -l "Issue Management" "${LOGS_DIR}"/navigation_session_*.log 2>/dev/null | wc -l)"
    echo "‚Ä¢ CI Troubleshooting focus sessions: $(grep -l "CI/CD Troubleshooting" "${LOGS_DIR}"/navigation_session_*.log 2>/dev/null | wc -l)"
    echo
    echo "üí° Success Indicators:"
    echo "‚Ä¢ Reduced context-building conversations"
    echo "‚Ä¢ Faster task focus and resolution"
    echo "‚Ä¢ Consistent use of pre-loaded context"
    echo
    echo "üéØ Next Phase Readiness:"
    echo "‚Ä¢ If 5+ successful sessions ‚Üí Expand to more domains"
    echo "‚Ä¢ If clear efficiency gains ‚Üí Extract as universal template"
    echo "‚Ä¢ If minimal usage ‚Üí Refine or discontinue"
    echo
    read -r -p "Press Enter to return to main menu..."
}

# Main navigation loop
main() {
    log_action "Starting DevOnboarder Navigator MVN session"

    # CRITICAL: Branch workflow validation
    check_branch_workflow

    while true; do
        show_main_menu
        read -r -p "Choose option [0-2,9]: " choice

        case $choice in
            1)
                log_action "User selected: Issue Management"
                load_issue_management_context
                log_action "Issue Management context session completed"
                break
                ;;
            2)
                log_action "User selected: CI/CD Troubleshooting"
                load_ci_troubleshooting_context
                log_action "CI/CD Troubleshooting context session completed"
                break
                ;;
            9)
                show_navigation_metrics
                ;;
            0)
                log_action "User exited navigation"
                echo "Goodbye! üëã"
                exit 0
                ;;
            *)
                echo
                echo "‚ùå Invalid option. Please choose 0, 1, 2, or 9."
                echo
                read -r -p "Press Enter to continue..."
                ;;
        esac
    done

    log_action "Navigation session ended - transitioning to AI conversation"
}

# Run the navigator
main "$@"
