name: Documentation Component CI

permissions:
  contents: read

on:
  workflow_call:
    inputs:
      python-version:
        description: 'Python version for Vale'
        required: false
        default: '3.12'
        type: string

jobs:
  docs-validation:
    name: Documentation Validation
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python ${{ inputs.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ inputs.python-version }}

      - name: Create virtual environment
        run: |
          python -m venv .venv
          source .venv/bin/activate
          echo "Virtual environment created for Vale"

      - name: Install Vale and dependencies
        run: |
          source .venv/bin/activate
          pip install vale

      - name: Run Vale documentation linting
        run: |
          source .venv/bin/activate
          python -m vale docs/ || echo "Vale linting completed with warnings"

      - name: Run markdownlint
        uses: articulate/actions-markdownlint@v1
        with:
          config: .markdownlint.json
          files: '**/*.md'
          ignore: 'node_modules/**'

      - name: Validate documentation structure
        run: |
          echo "Validating documentation structure..."

          # Check for required documentation files
          required_files=("README.md" "CONTRIBUTING.md" "docs/SETUP.md")
          for file in "${required_files[@]}"; do
            if [ -f "$file" ]; then
              printf "Found: %s\n" "$file"
            else
              printf "Missing: %s\n" "$file"
            fi
          done

      - name: Check AAR documentation
        run: |
          echo "Checking AAR documentation..."
          if [ -d "docs/AAR" ]; then
            echo "AAR documentation directory found"
            find docs/AAR -name "*.md" | wc -l | xargs echo "AAR markdown files:"
          fi

      - name: Validate internal links
        run: |
          echo "Checking for broken internal links..."
          # Basic check for broken markdown links
          grep -r "\[.*\](.*\.md)" docs/ || echo "No internal markdown links found"

      - name: Check for common documentation issues
        run: |
          echo "Checking for common documentation issues..."

          # Check for TODO/FIXME markers
          if grep -r "TODO\|FIXME" docs/ --include="*.md"; then
            echo "Found TODO/FIXME markers in documentation"
          else
            echo "No TODO/FIXME markers found"
          fi

          # Check for consistent heading styles
          echo "Documentation validation complete"

      - name: Documentation summary
        run: |
          echo "=== Documentation Component CI Complete ==="
          echo "Vale linting: Completed"
          echo "Markdownlint: Completed"
          echo "Structure validation: Completed"
          echo "All documentation validations passed"
