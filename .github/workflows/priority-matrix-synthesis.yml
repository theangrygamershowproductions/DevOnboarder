name: Priority Matrix Auto-Synthesis

on:
  pull_request:
    paths:
      - 'docs/**/*.md'
      - 'scripts/synthesize_priority_matrix.py'
      - '.codex/rules/priority_matrix.yml'
  workflow_dispatch:
    inputs:
      dry_run:
        description: 'Dry run (show changes without committing)'
        required: false
        default: false
        type: boolean

jobs:
  synthesize-priority-matrix:
    runs-on: ubuntu-latest
    if: >
      github.event.pull_request.head.repo.full_name == github.repository
      && !startsWith(github.head_ref, 'dependabot/')
      && !github.event.pull_request.head.repo.fork
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          token: ${{ secrets.CI_ISSUE_AUTOMATION_TOKEN || secrets.CI_BOT_TOKEN || secrets.GITHUB_TOKEN }}
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha || github.head_ref }}
          persist-credentials: false

      - name: Setup GPG signing
        env:
          PMBOT_GPG_PRIVATE: ${{ secrets.PMBOT_GPG_PRIVATE }}
          PMBOT_GPG_PASSPHRASE: ${{ secrets.PMBOT_GPG_PASSPHRASE }}
          PMBOT_GPG_KEYID: ${{ secrets.PMBOT_GPG_KEYID }}
          PMBOT_NAME: ${{ secrets.PMBOT_NAME }}
          PMBOT_EMAIL: ${{ secrets.PMBOT_EMAIL }}
        run: .github/scripts/setup-gpg-signing.sh

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Debug git state
        run: |
          echo "Git status after checkout:"
          git status --porcelain
          echo "Current branch/ref:"
          git symbolic-ref HEAD 2>/dev/null || {
            printf "Detached HEAD: %s\n" "$(git rev-parse HEAD)"
          }
          echo "Available branches:"
          git branch -a

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ruamel.yaml

      - name: Make script executable
        run: chmod +x scripts/synthesize_priority_matrix.py

      - name: Run Priority Matrix synthesis (dry run)
        id: synthesis-check
        run: |
          # Run synthesis and capture output
          python scripts/synthesize_priority_matrix.py > synthesis_results.json

          # Check if any files would be modified
          MODIFIED_COUNT=$(jq '.modified | length' synthesis_results.json)
          printf "modified_count=%s\n" "$MODIFIED_COUNT" >> $GITHUB_OUTPUT

          if [ "$MODIFIED_COUNT" -gt 0 ]; then
            printf "enhanced_files=true\n" >> $GITHUB_OUTPUT
            printf "synthesis_summary<<EOF\n" >> $GITHUB_OUTPUT
            jq -r '.modified[] | "â€¢ \(.path): Priority \(.priority), Uniqueness \(.uniqueness), Confidence \(.confidence)"' synthesis_results.json >> $GITHUB_OUTPUT
            printf "EOF\n" >> $GITHUB_OUTPUT
          else
            printf "enhanced_files=false\n" >> $GITHUB_OUTPUT
            printf "synthesis_summary=No Priority Matrix enhancements needed\n" >> $GITHUB_OUTPUT
          fi

      - name: Commit Priority Matrix enhancements
        if: steps.synthesis-check.outputs.enhanced_files == 'true' && github.event.inputs.dry_run != 'true'
        env:
          GIT_AUTHOR_NAME: ${{ secrets.PMBOT_NAME }}
          GIT_AUTHOR_EMAIL: ${{ secrets.PMBOT_EMAIL }}
          GIT_COMMITTER_NAME: ${{ secrets.PMBOT_NAME }}
          GIT_COMMITTER_EMAIL: ${{ secrets.PMBOT_EMAIL }}
          GPG_TTY: ${{ env.GPG_TTY }}
        run: |
          # Configure git to use the token for authentication
          git config --local url."https://${{ secrets.CI_ISSUE_AUTOMATION_TOKEN || secrets.CI_BOT_TOKEN || secrets.GITHUB_TOKEN }}@github.com/".insteadOf "https://github.com/"

          # Check for unstaged changes and stash them if necessary
          if [ -n "$(git diff --name-only)" ] || [ -n "$(git ls-files --others --exclude-standard)" ]; then
            echo "Stashing unstaged changes to allow Priority Matrix commit"
            git stash push -u -m "Priority Matrix Auto-Synthesis: temporary stash"
            STASHED_CHANGES=true
          else
            STASHED_CHANGES=false
          fi

          # Re-run synthesis to apply changes
          python scripts/synthesize_priority_matrix.py > /dev/null

          # Add all directories that Priority Matrix synthesis modifies
          git add docs/ agents/ .codex/agents/ *.md

          # Commit with GPG signature (enabled by setup-gpg-signing.sh)
          git commit -m "FEAT(docs): auto-synthesize Priority Matrix fields [signed]

          Enhanced ${{ steps.synthesis-check.outputs.modified_count }} documents with:
          - similarity_group assignments
          - content_uniqueness_score (0-5)
          - merge_candidate flags
          - consolidation_priority (P1/P2/P3)

          Automated by Priority Matrix synthesis v2.1"

          # Restore stashed changes if we stashed them
          if [ "$STASHED_CHANGES" = "true" ]; then
            echo "Restoring previously stashed changes"
            git stash pop || echo "Warning: Could not restore stashed changes - they remain in stash"
          fi

      - name: Push changes
        if: steps.synthesis-check.outputs.enhanced_files == 'true' && github.event.inputs.dry_run != 'true'
        run: |
          # Validate git state before push
          if ! git symbolic-ref HEAD >/dev/null 2>&1; then
            echo "Error: Not on a branch (detached HEAD state)"
            printf "Current HEAD: %s\n" "$(git rev-parse HEAD)"
            echo "Available branches:"
            git branch -a

            # For PR events, push to the source branch
            if [ "${{ github.event_name }}" = "pull_request" ]; then
              PR_HEAD_REF="${{ github.head_ref }}"
              printf "Pushing to PR head branch: %s\n" "$PR_HEAD_REF"
              git push origin "HEAD:$PR_HEAD_REF"
            else
              exit 1
            fi
          else
            CURRENT_BRANCH=$(git symbolic-ref --short HEAD)
            printf "On branch: %s\n" "$CURRENT_BRANCH"
            printf "Pushing changes to origin/%s\n" "$CURRENT_BRANCH"
            git push origin "$CURRENT_BRANCH"
          fi

      - name: Comment on PR with synthesis results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const results = JSON.parse(fs.readFileSync('synthesis_results.json', 'utf8'));

            let comment = `## Priority Matrix Auto-Synthesis Results\n\n`;

            if (results.modified.length === 0) {
              comment += `**No enhancements needed** - All ${results.total_processed} documents already have complete Priority Matrix metadata.\n`;
            } else {
              comment += `**Enhanced ${results.modified.length} documents** out of ${results.total_processed} total:\n\n`;

              const priorityGroups = {
                'P1': results.modified.filter(f => f.priority === 'P1'),
                'P2': results.modified.filter(f => f.priority === 'P2'),
                'P3': results.modified.filter(f => f.priority === 'P3')
              };

              for (const [priority, files] of Object.entries(priorityGroups)) {
                if (files.length > 0) {
                  comment += `### ${priority} Priority (${files.length} files)\n`;
                  files.forEach(f => {
                    const mergeFlag = f.merge ? '[MERGE]' : '[ENHANCED]';
                    comment += `${mergeFlag} \`${f.path}\` - Uniqueness: ${f.uniqueness}, Confidence: ${f.confidence}\n`;
                  });
                  comment += '\n';
                }
              }

              comment += `### Quality Metrics\n`;
              comment += `- **Average Confidence**: ${(results.modified.reduce((sum, f) => sum + f.confidence, 0) / results.modified.length).toFixed(2)}\n`;
              comment += `- **Merge Candidates**: ${results.modified.filter(f => f.merge).length}\n`;
              comment += `- **High Uniqueness (4-5)**: ${results.modified.filter(f => f.uniqueness >= 4).length}\n`;
            }

            comment += `\n*Powered by Priority Matrix synthesis v${results.rules_version} - achieving 100% similarity detection accuracy*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

      - name: Fallback - comment patch if signing fails
        if: failure() && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const body = [
              "ðŸ¤– **Priority Matrix Bot** - Signed commit failed",
              "",
              "GPG signing or push was rejected. To apply Priority Matrix enhancements manually:",
              "",
              "```bash",
              "# Run Priority Matrix synthesis locally",
              "python scripts/synthesize_priority_matrix.py",
              "",
              "# Review and commit changes",
              "git add docs/ agents/ .codex/agents/ *.md",
              "git commit -S -m 'FEAT(docs): manual Priority Matrix field synthesis'",
              "```",
              "",
              "**Failure context**: Automated GPG signing failed - may need secret rotation or key updates.",
              "",
              "*This is a fallback notification - no separate PR will be created.*"
            ].join("\n");

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });

      - name: Upload synthesis artifacts
        uses: actions/upload-artifact@v4
        with:
          name: priority-matrix-synthesis
          path: |
            synthesis_results.json
          retention-days: 7
