---
name: AAR Automation (GPG Signed)
# Automated After Action Report generation with cryptographic signature verification
# Triggers: Issue closure, PR merge, manual dispatch
# Bot: DevOnboarder AAR Bot with GPG signing for commit authenticity

on:
  issues:
    types: [closed]
  pull_request:
    types: [closed]
  workflow_dispatch:
    inputs:
      aar_type:
        description: 'Type of AAR to generate'
        required: true
        type: choice
        options:
          - issue
          - pull_request
          - sprint
          - incident
          - automation
      reference:
        description: 'Issue number (for issue AAR) or title/description'
        required: false
        type: string
      title:
        description: 'AAR title (for non-issue AARs)'
        required: false
        type: string

jobs:
  generate-aar:
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'issues' &&
       (contains(github.event.issue.labels.*.name, 'needs-aar') ||
        contains(github.event.issue.labels.*.name, 'critical') ||
        contains(github.event.issue.labels.*.name, 'infrastructure') ||
        contains(github.event.issue.labels.*.name, 'security'))) ||
      (github.event_name == 'pull_request' &&
       github.event.pull_request.merged == true &&
       (contains(github.event.pull_request.labels.*.name, 'needs-aar') ||
        contains(github.event.pull_request.labels.*.name, 'critical') ||
        contains(github.event.pull_request.labels.*.name, 'infrastructure') ||
        contains(github.event.pull_request.labels.*.name, 'security') ||
        contains(github.event.pull_request.labels.*.name, 'feature') ||
        contains(github.event.pull_request.labels.*.name, 'breaking-change') ||
        github.event.pull_request.changed_files > 10)) ||
      github.event_name == 'workflow_dispatch'

    permissions:
      # Enhanced permissions for AAR automation with GPG signing
      contents: write        # Required for git commits and push
      issues: write          # Required for creating follow-up issues
      pull-requests: write   # Required for PR comments and data access
      actions: read          # Required for workflow metadata access
      # gpg-signing: Required for commit verification

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          token: ${{ secrets.CI_ISSUE_AUTOMATION_TOKEN || secrets.CI_BOT_TOKEN || secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Setup Python environment
        run: |
          python -m venv .venv
          source .venv/bin/activate
          pip install --upgrade pip

      - name: Setup GPG commit signing (AAR Bot)
        env:
          AAR_BOT_GPG_PRIVATE: ${{ secrets.AAR_BOT_GPG_PRIVATE }}
          AAR_BOT_GPG_KEY_ID: ${{ vars.AAR_BOT_GPG_KEY_ID }}
          AAR_BOT_NAME: ${{ vars.AAR_BOT_NAME }}
          AAR_BOT_EMAIL: ${{ vars.AAR_BOT_EMAIL }}
        run: |
          # Import GPG private key (using printf to avoid terminal output violations)
          printf '%s\n' "$AAR_BOT_GPG_PRIVATE" | base64 -d | gpg --batch --import --quiet

          # Configure git to use GPG signing
          git config --global user.name "$AAR_BOT_NAME"
          git config --global user.email "$AAR_BOT_EMAIL"
          git config --global user.signingkey "$AAR_BOT_GPG_KEY_ID"
          git config --global commit.gpgsign true
          git config --global gpg.format openpgp

          # Set up non-interactive GPG trust for automation
          gpg --batch --no-tty --command-fd 0 --edit-key "$AAR_BOT_GPG_KEY_ID" <<EOF
          trust
          5
          y
          quit
          EOF

          echo "GPG signing configured for AAR Bot automation"

      - name: Install GitHub CLI
        run: |
          type -p curl >/dev/null || \
            (sudo apt update && sudo apt install curl -y)
          curl -fsSL \
            https://cli.github.com/packages/githubcli-archive-keyring.gpg | \
            sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
          sudo chmod go+r \
            /usr/share/keyrings/githubcli-archive-keyring.gpg
          ARCH=$(dpkg --print-architecture)
          printf -- 'deb [arch=%s signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main\n' \
              "$ARCH" | \
              sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
          sudo apt update
          sudo apt install gh -y

      - name: Generate AAR (Issue Closure)
        if: github.event_name == 'issues'
        run: |
          chmod +x scripts/generate_aar.sh
          ./scripts/generate_aar.sh issue ${{ github.event.issue.number }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate AAR (PR Closure)
        if: github.event_name == 'pull_request'
        run: |
          chmod +x scripts/generate_aar.sh
          ./scripts/generate_aar.sh pull_request ${{ github.event.pull_request.number }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate AAR (Manual)
        if: github.event_name == 'workflow_dispatch'
        run: |
          chmod +x scripts/generate_aar.sh
          case "${{ github.event.inputs.aar_type }}" in
            "issue")
              ./scripts/generate_aar.sh issue "${{ github.event.inputs.reference }}"
              ;;
            "pull_request")
              ./scripts/generate_aar.sh pull_request "${{ github.event.inputs.reference }}"
              ;;
            "sprint"|"incident"|"automation")
              ./scripts/generate_aar.sh "${{ github.event.inputs.aar_type }}" "${{ github.event.inputs.title }}"
              ;;
          esac
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Commit AAR files (GPG signed)
        run: |
          git add .aar/
          if git diff --staged --quiet; then
            echo "No AAR files to commit"
          else
            # Determine AAR type for commit message
            if [ "${{ github.event_name }}" = "issues" ]; then
              printf 'DOCS(aar): add after actions report for issue #%s [signed]\n\n' \
                "${{ github.event.issue.number }}" > commit_msg.txt
              printf '- Generated AAR for issue resolution analysis\n' >> commit_msg.txt
              printf '- Captured lessons learned and process improvements\n' >> commit_msg.txt
              printf '- AAR Bot automation: cryptographically signed\n\n' >> commit_msg.txt
              printf 'Issue: #%s\nAAR Type: Issue closure analysis' \
                "${{ github.event.issue.number }}" >> commit_msg.txt
            elif [ "${{ github.event_name }}" = "pull_request" ]; then
              printf 'DOCS(aar): add after actions report for PR #%s [signed]\n\n' \
                "${{ github.event.pull_request.number }}" > commit_msg.txt
              printf '- Generated AAR for pull request analysis\n' >> commit_msg.txt
              printf '- Captured development insights and learnings\n' >> commit_msg.txt
              printf '- AAR Bot automation: cryptographically signed\n\n' >> commit_msg.txt
              printf 'PR: #%s\nAAR Type: Pull request development analysis' \
                "${{ github.event.pull_request.number }}" >> commit_msg.txt
            else
              printf 'DOCS(aar): add after actions report for %s [signed]\n\n' \
                "${{ github.event.inputs.aar_type }}" > commit_msg.txt
              printf '- Generated AAR for %s analysis\n' "${{ github.event.inputs.aar_type }}" >> commit_msg.txt
              printf '- Manual AAR generation via workflow dispatch\n' >> commit_msg.txt
              printf '- AAR Bot automation: cryptographically signed\n\n' >> commit_msg.txt
              printf 'AAR Type: %s' "${{ github.event.inputs.aar_type }}" >> commit_msg.txt
            fi

            # Commit with GPG signature
            git commit -F commit_msg.txt

            # Push using token hierarchy (CI_ISSUE_AUTOMATION_TOKEN → CI_BOT_TOKEN → GITHUB_TOKEN)
            git push

            echo "AAR files committed and pushed with GPG signature"
          fi

      - name: Create follow-up issue for action items
        if: github.event_name == 'issues'
        uses: actions/github-script@v7
        with:
          script: |
            const issueNumber = context.issue.number;
            const issueTitle = context.payload.issue.title;

            const body = `## AAR Follow-up: Action Items for #${issueNumber}

            This issue tracks the action items identified in the After Actions Report for #${issueNumber}.

            **Original Issue**: #${issueNumber} - ${issueTitle}
            **AAR Location**: \`.aar/${new Date().getFullYear()}/Q${Math.ceil((new Date().getMonth() + 1) / 3)}/issues/issue-${issueNumber}-*.md\`

            ## Action Items
            <!-- Copy action items from the AAR and convert to GitHub issue tasks -->

            - [ ] Review AAR and extract specific action items
            - [ ] Assign owners and due dates for each action item
            - [ ] Update documentation as specified in AAR
            - [ ] Implement process improvements identified in AAR

            ## Next Steps
            1. Review the generated AAR file
            2. Extract specific action items and update this issue
            3. Assign action items to appropriate team members
            4. Set due dates based on priority and complexity
            5. Close this issue when all action items are complete

            **Labels**: \`aar-follow-up\`, \`process-improvement\`
            `;

            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `AAR Follow-up: Action Items for #${issueNumber}`,
              body: body,
              labels: ['aar-follow-up', 'process-improvement']
            });

      - name: Create follow-up issue for PR action items
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = context.payload.pull_request.number;
            const prTitle = context.payload.pull_request.title;
            const prAuthor = context.payload.pull_request.user.login;

            const body = `## AAR Follow-up: Action Items for PR #${prNumber}

            This issue tracks the action items identified in the After Actions Report for PR #${prNumber}.

            **Original PR**: #${prNumber} - ${prTitle}
            **PR Author**: @${prAuthor}
            **AAR Location**: \`.aar/${new Date().getFullYear()}/Q${Math.ceil((new Date().getMonth() + 1) / 3)}/pull-requests/pr-${prNumber}-*.md\`

            ## Action Items
            <!-- Copy action items from the AAR and convert to GitHub issue tasks -->

            - [ ] Review AAR and extract specific action items
            - [ ] Update documentation based on PR learnings
            - [ ] Implement process improvements identified
            - [ ] Share knowledge with team members

            ## Next Steps
            1. Review the generated AAR file
            2. Extract specific action items and update this issue
            3. Assign action items to appropriate team members
            4. Document any architectural decisions made
            5. Close this issue when all action items are complete

            **Labels**: \`aar-follow-up\`, \`process-improvement\`, \`pr-learnings\`
            `;

            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `AAR Follow-up: Action Items for PR #${prNumber}`,
              body: body,
              labels: ['aar-follow-up', 'process-improvement', 'pr-learnings']
            });

      - name: Comment on PR with AAR link
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = context.payload.pull_request.number;
            const prTitle = context.payload.pull_request.title;
            const quarter = Math.ceil((new Date().getMonth() + 1) / 3);
            const year = new Date().getFullYear();
            const aarPath = `.aar/${year}/Q${quarter}/pull-requests/pr-${prNumber}-*.md`;

            const comment = `## After Action Report Generated

            An AAR has been automatically generated for this PR to capture development insights and learnings.

            **AAR Location**: \`${aarPath}\`
            **Follow-up Issue**: Will be created with action items from the AAR
            **Purpose**: Preserve institutional knowledge and improve development processes

            ### What's Included:
            - Technical decisions and architectural choices
            - Development process analysis
            - Lessons learned and best practices
            - Action items for future improvements

            This helps maintain DevOnboarder's "quiet reliability" philosophy by capturing valuable insights from every significant change.`;

            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              body: comment
            });

      - name: Comment on Issue with AAR link
        if: github.event_name == 'issues'
        uses: actions/github-script@v7
        with:
          script: |
            const issueNumber = context.issue.number;
            const issueTitle = context.payload.issue.title;
            const quarter = Math.ceil((new Date().getMonth() + 1) / 3);
            const year = new Date().getFullYear();
            const aarPath = `.aar/${year}/Q${quarter}/issues/issue-${issueNumber}-*.md`;

            const comment = `## After Action Report Generated

            An AAR has been automatically generated for this issue to capture resolution insights and process learnings.

            **AAR Location**: \`${aarPath}\`
            **Follow-up Issue**: Will be created with action items from the AAR
            **Purpose**: Document lessons learned and prevent similar issues

            ### What's Included:
            - Root cause analysis
            - Resolution timeline and process
            - What worked well and areas for improvement
            - Preventive measures and action items

            This systematic approach helps DevOnboarder continuously improve its reliability and processes.`;

            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber,
              body: comment
            });

      - name: Enhanced Issue Comment with AAR Summary
        if: github.event_name == 'issues' || github.event_name == 'pull_request'
        run: |
          source .venv/bin/activate
          chmod +x scripts/comment_on_issue.py

          if [ "${{ github.event_name }}" = "pull_request" ]; then
            python3 scripts/comment_on_issue.py --type aar --ref "pr-${{ github.event.pull_request.number }}"
          else
            python3 scripts/comment_on_issue.py --type aar --ref "${{ github.event.issue.number }}"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload AAR artifacts
        uses: actions/upload-artifact@v4
        with:
          name: aar-files-${{ github.run_number }}
          path: |
            .aar/
            logs/aar_generation_*.log
          retention-days: 30
