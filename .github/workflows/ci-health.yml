# ---
# codex-agent:
#     name: Agent.CiHealth
#     role: Checks active branches for CI stability
#     scope: .github/workflows/ci-health.yml
#     triggers: Weekly schedule or manual dispatch
#     output: Issue summarizing failing branches
#     tags: [automation, codex, ci, health, bot]
#     version: 1.1.0
#     last_updated: 2025-07-25
#     owner: TAGS Engineering
# ---

name: CI Health

on:
    schedule:
        - cron: "0 3 * * 0"
    workflow_dispatch:

permissions:
    contents: read
    issues: write

jobs:
    validate-yaml:
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v5
            - uses: ibiqlik/action-yamllint@v3
              with:
                  file_or_dir: ".github/workflows/**/*.yml"
                  config_file: .github/.yamllint-config

    branches:
        needs: validate-yaml
        runs-on: ubuntu-latest
        outputs:
            list: ${{ steps.set.outputs.list }}
        steps:
            - uses: actions/checkout@v5
              with:
                  fetch-depth: 0
            - name: Fetch branches
              run: |
                  git fetch origin "+refs/heads/*:refs/remotes/origin/*"
            - name: Select active branches
              id: set
              run: |
                  cutoff=$(date -d '30 days ago' +%s)
                  active=$(git for-each-ref --format='%(refname:strip=3) %(committerdate:unix)' refs/remotes/origin |
                    awk -v cutoff="$cutoff" '$1 != "HEAD" && $1 != "main" && $2 >= cutoff {print $1}')
                  if [ -z "$active" ]; then
                    printf "list=[]\n" >> "$GITHUB_OUTPUT"
                  else
                    json=$(echo "$active" | jq -R . | jq -s .)
                    printf "list=%s\n" "$json" >> "$GITHUB_OUTPUT"
                  fi

    test:
        needs: branches
        if: needs.branches.outputs.list != '[]'
        runs-on: ubuntu-latest
        strategy:
            fail-fast: false
            matrix:
                branch: ${{ fromJson(needs.branches.outputs.list) }}
                python-version: ["3.12"]
                node-version: ["22"]
        steps:
            - uses: actions/checkout@v5
              with:
                  fetch-depth: 0
                  ref: ${{ matrix.branch }}
            - name: Install GitHub CLI
              uses: ./.github/actions/setup-gh-cli
              with:
                  version: stable
                  token: ${{ secrets.GITHUB_TOKEN }}
            - name: Show gh version
              run: which gh && gh --version
            - name: Set up Python
              uses: actions/setup-python@v4
              with:
                  python-version: ${{ matrix['python-version'] }}
            - name: Set up Node
              uses: actions/setup-node@v3
              with:
                  node-version: ${{ matrix['node-version'] }}
            - name: Run CI tests
              run: bash scripts/run_tests.sh
            - name: Record result
              if: always()
              run: |
                echo "${{ matrix.branch }}: ${{ job.status }}" > result.txt
            - name: Upload result
              if: always()
              uses: actions/upload-artifact@v4
              with:
                  name: result-${{ matrix.branch }}
                  path: result.txt

    report:
        needs: test
        if: always()
        runs-on: ubuntu-latest
        steps:
            - name: Set token for CI Health operations
              id: set-token
              run: |
                # Multi-step token selection following Priority Matrix pattern
                if [ -n "${{ secrets.CI_ISSUE_AUTOMATION_TOKEN }}" ]; then
                    echo "selected-token=${{ secrets.CI_ISSUE_AUTOMATION_TOKEN }}" >> $GITHUB_OUTPUT
                    echo "token-source=CI_ISSUE_AUTOMATION_TOKEN" >> $GITHUB_OUTPUT
                elif [ -n "${{ secrets.CI_BOT_TOKEN }}" ]; then
                    echo "selected-token=${{ secrets.CI_BOT_TOKEN }}" >> $GITHUB_OUTPUT
                    echo "token-source=CI_BOT_TOKEN" >> $GITHUB_OUTPUT
                elif [ -n "${{ secrets.GITHUB_TOKEN }}" ]; then
                    echo "selected-token=${{ secrets.GITHUB_TOKEN }}" >> $GITHUB_OUTPUT
                    echo "token-source=GITHUB_TOKEN" >> $GITHUB_OUTPUT
                else
                    echo "::error::No authentication token available for CI Health operations!"
                    exit 1
                fi
                echo "Using token source for CI Health: $(cat $GITHUB_OUTPUT | grep token-source | cut -d= -f2)"

            - uses: actions/download-artifact@v4
              with:
                  path: results
            - name: Install GitHub CLI
              uses: ./.github/actions/setup-gh-cli
              with:
                  version: stable
                  token: ${{ secrets.GITHUB_TOKEN }}
            - name: Show gh version
              run: which gh && gh --version
            - id: summarize
              run: |
                  failures=$(grep -h "" results/result-*/result.txt | awk -F': ' '$2=="failure"{print $1}')
                  failures_cleaned=${failures%%[[:space:]]*}
                  printf "failures=%s\n" "$failures_cleaned" >> "$GITHUB_OUTPUT"
            - name: Install PyYAML
              run: pip install PyYAML
            - name: Validate ci_bot permissions
              run: 'bash scripts/validate-bot-permissions.sh'
              env:
                  BOT_KEY: ${{ secrets.CI_BOT_TOKEN }}
            - name: Create issue for failures
              if: steps.summarize.outputs.failures != ''
              env:
                  GH_TOKEN: ${{ steps.set-token.outputs.selected-token }}
                  FAILED: ${{ steps.summarize.outputs.failures }}
                  CI_BOT_USERNAME: ${{ secrets.CI_BOT_USERNAME }}
              run: |
                  echo "CI checks failed for the following branches:" > body.md
                  for b in $FAILED; do
                    echo "- $b" >> body.md
                  done
                  jq -Rs --arg title "CI health failures $(date -I)" '{title:$title,body:.}' body.md > notify.json
                  gh workflow run notify.yml -f data="$(cat notify.json)"
            - name: Summary if no failures
              if: steps.summarize.outputs.failures == ''
              run: echo "All scheduled CI runs passed" > /dev/null
