# ---
# codex-agent:
#   name: post_merge_cleanup
#   role: Cleans up logs and artifacts after successful merges to main
#   scope: .github/workflows/post-merge-cleanup.yml
#   triggers: Push to main branch
#   output: Cleaned workspace ready for next development cycle
# ---
name: Post-Merge Cleanup

on:
    push:
        branches:
            - main

permissions:
    contents: read
    issues: write

jobs:
    cleanup:
        runs-on: ubuntu-latest
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'

        steps:
            - uses: actions/checkout@v5

            - name: Set up Python
              uses: actions/setup-python@v4
              with:
                  python-version: "3.12"

            - name: Create virtual environment
              run: |
                  python -m venv .venv
                  source .venv/bin/activate
                  printf "VIRTUAL_ENV=%s\n" "$VIRTUAL_ENV" >> "$GITHUB_ENV"
                  printf "%s/bin\n" "$VIRTUAL_ENV" >> "$GITHUB_PATH"

            - name: Install minimal dependencies
              run: |
                  source .venv/bin/activate
                  pip install --no-cache-dir wheel

            - name: Clean accumulated logs after successful merge
              run: |
                  echo "Post-merge cleanup: Smart cleanup of accumulated artifacts"

                  # Show current log status
                  if [ -d logs ]; then
                      log_count=$(find logs -type f | wc -l)
                      log_size=$(du -sh logs 2>/dev/null | cut -f1 || echo "Unknown")
                      printf "Current logs: %s files (%s)\n" "$log_count" "$log_size"
                  fi

                  # Smart cleanup - removes temporary artifacts but preserves important logs
                  bash scripts/manage_logs.sh smart-clean

                  # Final status
                  if [ -d logs ]; then
                      remaining_count=$(find logs -type f | wc -l)
                      remaining_size=$(du -sh logs 2>/dev/null | cut -f1 || echo "Unknown")
                      printf "Smart cleanup complete: %s files remaining (%s)\n" "$remaining_count" "$remaining_size"
                  else
                      echo "No logs directory found"
                  fi

            - name: Archive important logs before cleanup
              if: always()
              run: |
                  if [ -d logs ] && [ "$(find logs -type f | wc -l)" -gt 0 ]; then
                      # Archive any remaining logs before final cleanup
                      bash scripts/manage_logs.sh archive
                      echo "Important logs archived"
                  fi

            - name: Close resolved CI failure issues
              env:
                  GH_TOKEN: ${{ secrets.CI_ISSUE_AUTOMATION_TOKEN || secrets.CI_BOT_TOKEN || secrets.GITHUB_TOKEN }}
                  COMMIT_MESSAGE: ${{ github.event.head_commit.message }}
              run: |
                  echo "Checking for CI failure issues to close after successful merge"

                  # Get the commit message to extract PR number
                  printf "Commit message: %s\n" "$COMMIT_MESSAGE"

                  # Extract PR number from commit message (format: "PR #123" or "#123")
                  PR_NUMBER=$(printf -- "%s" "$COMMIT_MESSAGE" | grep -oE '#[0-9]+' | head -1 | sed 's/#//')

                  if [ -n "$PR_NUMBER" ]; then
                      printf "Found PR number: %s\n" "$PR_NUMBER"
                      bash scripts/manage_ci_failure_issues.sh close "$PR_NUMBER"
                  else
                      echo "No PR number found in commit message"
                  fi

            - name: Upload cleanup summary
              if: always()
              uses: actions/upload-artifact@v4
              with:
                  name: post-merge-cleanup-summary
                  path: |
                      logs_archive_*.tar.gz
                  retention-days: 7
