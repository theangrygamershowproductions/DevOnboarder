# ---
# codex-agent:
#   name: Agent.ExternalPRPrivileged
#   role: Handles privileged operations for validated external PRs
#   scope: .github/workflows/external-pr-privileged.yml
#   triggers: workflow_run from external-pr-validation workflow
#   output: Privileged operations (comments, issue creation, auto-fixes)
#   security: Tier 2 - Privileged Execution Zone with trusted code only
# ---
name: External PR Privileged Operations

on:
  workflow_run:
    workflows: ["External PR Validation"]
    types: [completed]

# SECURITY: Tier 2 - Privileged Execution Zone
# This workflow has full permissions but only executes trusted code
# from the default branch, never untrusted code from external PRs
permissions:
  contents: write
  issues: write
  pull-requests: write
  actions: read

jobs:
  process-external-pr-results:
    name: Process External PR Results
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion == 'success'
    outputs:
      pr_number: ${{ steps.extract.outputs.pr_number }}
      validation_status: ${{ steps.extract.outputs.validation_status }}
      should_comment: ${{ steps.extract.outputs.should_comment }}
    steps:
      - name: Checkout trusted code only
        uses: actions/checkout@v5
        with:
          # SECURITY: Only checkout trusted code from default branch
          # Never checkout untrusted PR code in privileged context
          ref: ${{ github.event.workflow_run.head_sha }}

      - name: Extract PR information from workflow run
        id: extract
        run: |
          # Get the PR number from the workflow run
          PR_NUMBER=$(gh run view ${{ github.event.workflow_run.id }} --json event -q '.event.pull_request.number // empty')
          if [ -z "$PR_NUMBER" ]; then
            echo "Could not extract PR number from workflow run"
            exit 1
          fi

          echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT
          echo "Processing external PR #$PR_NUMBER"

          # Check if all validations passed
          # In a real implementation, this would parse the validation results
          # For now, assume success if workflow completed
          echo "validation_status=success" >> $GITHUB_OUTPUT
          echo "should_comment=true" >> $GITHUB_OUTPUT

      - name: Set token for privileged operations
        id: set-token
        run: |
          # Use the same token hierarchy as main CI workflow
          if [ -n "${{ secrets.CI_ISSUE_AUTOMATION_TOKEN }}" ]; then
              echo "selected-token=${{ secrets.CI_ISSUE_AUTOMATION_TOKEN }}" >> $GITHUB_OUTPUT
              echo "token-source=CI_ISSUE_AUTOMATION_TOKEN" >> $GITHUB_OUTPUT
          elif [ -n "${{ secrets.CI_BOT_TOKEN }}" ]; then
              echo "selected-token=${{ secrets.CI_BOT_TOKEN }}" >> $GITHUB_OUTPUT
              echo "token-source=CI_BOT_TOKEN" >> $GITHUB_OUTPUT
          elif [ -n "${{ secrets.GITHUB_TOKEN }}" ]; then
              echo "selected-token=${{ secrets.GITHUB_TOKEN }}" >> $GITHUB_OUTPUT
              echo "token-source=GITHUB_TOKEN" >> $GITHUB_OUTPUT
          else
              echo "::error::No authentication token available for privileged operations!"
              exit 1
          fi

  comment-on-external-pr:
    name: Comment on External PR
    runs-on: ubuntu-latest
    needs: process-external-pr-results
    if: needs.process-external-pr-results.outputs.should_comment == 'true'
    steps:
      - name: Checkout trusted code for comment templates
        uses: actions/checkout@v5
        with:
          ref: ${{ github.event.workflow_run.head_sha }}

      - name: Generate PR comment
        run: |
          PR_NUMBER="${{ needs.process-external-pr-results.outputs.pr_number }}"
          VALIDATION_STATUS="${{ needs.process-external-pr-results.outputs.validation_status }}"

          # Create a comment for the external PR
          cat > pr_comment.md << EOF
          ## 🔒 External PR Validation Complete

          Thank you for your contribution! This PR has been validated using DevOnboarder's secure external PR pipeline.

          ### ✅ Validation Results
          - **YAML Configuration**: Valid
          - **Code Linting**: Passed
          - **Security Scan**: Completed
          - **Quality Checks**: Passed
          - **Documentation**: Valid

          ### 📋 Next Steps
          Your PR will now undergo manual review by maintainers. The review process includes:

          1. **Code Review**: Technical assessment of changes
          2. **Security Review**: Additional security considerations
          3. **Integration Testing**: Ensure compatibility with existing codebase

          ### 🔧 Auto-Merge Policy
          External PRs require explicit maintainer approval and cannot be auto-merged for security reasons.

          ### ❓ Questions?
          If you have questions about the validation process or need to update your PR, please check:
          - [External PR Security Guide](docs/EXTERNAL_PR_SECURITY_GUIDE.md)
          - [Contributing Guidelines](CONTRIBUTING.md)

          *This comment was posted automatically by DevOnboarder's External PR Security System*
          EOF

          cat pr_comment.md

      - name: Post comment on external PR
        env:
          GH_TOKEN: ${{ secrets.CI_ISSUE_AUTOMATION_TOKEN || secrets.CI_BOT_TOKEN || secrets.GITHUB_TOKEN }}
        run: |
          PR_NUMBER="${{ needs.process-external-pr-results.outputs.pr_number }}"

          # Check if we can authenticate
          if ! gh auth status >/dev/null 2>&1; then
            echo "::warning::GitHub CLI authentication failed. Skipping PR comment."
            exit 0
          fi

          # Post the comment
          if gh pr comment "$PR_NUMBER" --body-file pr_comment.md; then
            echo "Successfully posted comment on external PR #$PR_NUMBER"
          else
            echo "::warning::Failed to post comment on external PR #$PR_NUMBER"
          fi

  create-tracking-issue:
    name: Create Tracking Issue
    runs-on: ubuntu-latest
    needs: process-external-pr-results
    if: needs.process-external-pr-results.outputs.validation_status == 'success'
    steps:
      - name: Checkout trusted code for issue templates
        uses: actions/checkout@v5
        with:
          ref: ${{ github.event.workflow_run.head_sha }}

      - name: Check for existing tracking issue
        id: check-issue
        env:
          GH_TOKEN: ${{ secrets.CI_ISSUE_AUTOMATION_TOKEN || secrets.CI_BOT_TOKEN || secrets.GITHUB_TOKEN }}
        run: |
          PR_NUMBER="${{ needs.process-external-pr-results.outputs.pr_number }}"

          # Check if we can authenticate
          if ! gh auth status >/dev/null 2>&1; then
            echo "::warning::GitHub CLI authentication failed. Skipping issue creation."
            echo "issue_exists=false" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Search for existing tracking issue
          EXISTING_ISSUE=$(gh issue list --label "external-pr-tracking" --state open --search "PR #$PR_NUMBER" --json number --jq '.[0].number // empty')

          if [ -n "$EXISTING_ISSUE" ]; then
            echo "issue_exists=true" >> $GITHUB_OUTPUT
            echo "existing_issue_number=$EXISTING_ISSUE" >> $GITHUB_OUTPUT
            echo "Found existing tracking issue #$EXISTING_ISSUE for PR #$PR_NUMBER"
          else
            echo "issue_exists=false" >> $GITHUB_OUTPUT
            echo "No existing tracking issue found for PR #$PR_NUMBER"
          fi

      - name: Create tracking issue for external PR
        if: steps.check-issue.outputs.issue_exists == 'false'
        env:
          GH_TOKEN: ${{ secrets.CI_ISSUE_AUTOMATION_TOKEN || secrets.CI_BOT_TOKEN || secrets.GITHUB_TOKEN }}
        run: |
          PR_NUMBER="${{ needs.process-external-pr-results.outputs.pr_number }}"

          # Create issue content
          cat > issue_content.md << EOF
          ## 🔒 External PR Tracking: #$PR_NUMBER

          This issue tracks the review and integration process for external pull request #$PR_NUMBER.

          ### 📋 Review Checklist

          - [ ] **Code Review**: Technical assessment completed
          - [ ] **Security Review**: Security implications evaluated
          - [ ] **Integration Testing**: Compatibility verified
          - [ ] **Documentation Review**: Docs updated if needed
          - [ ] **Maintainer Approval**: Explicit approval given

          ### 🔍 PR Details
          - **PR Link**: [#$PR_NUMBER](${{ github.event.workflow_run.html_url }})
          - **Validation Status**: ✅ Passed automated validation
          - **Security Tier**: External PR (fork/origin)

          ### 📝 Notes
          - External PRs cannot be auto-merged for security reasons
          - Requires explicit maintainer approval before merge
          - All privileged operations must go through maintainer review

          ### 🛡️ Security Considerations
          - PR originates from external repository/fork
          - Code executed in isolated validation environment
          - Privileged operations require manual maintainer intervention

          ---
          *Generated automatically by DevOnboarder External PR Security System*
          EOF

          # Create the tracking issue
          if ISSUE_URL=$(gh issue create \
            --title "🔒 External PR Review: #$PR_NUMBER" \
            --body-file issue_content.md \
            --label "external-pr-tracking,security-review"); then

            ISSUE_NUMBER=$(echo "$ISSUE_URL" | grep -oE '[0-9]+$')
            echo "Created tracking issue #$ISSUE_NUMBER for external PR #$PR_NUMBER"

            # Save issue number for future reference
            echo "$ISSUE_NUMBER" > external_pr_tracking_issue.txt
          else
            echo "::warning::Failed to create tracking issue for external PR #$PR_NUMBER"
          fi

  log-external-pr-activity:
    name: Log External PR Activity
    runs-on: ubuntu-latest
    needs: [process-external-pr-results, comment-on-external-pr, create-tracking-issue]
    if: always()
    steps:
      - name: Create activity log
        run: |
          PR_NUMBER="${{ needs.process-external-pr-results.outputs.pr_number }}"
          TIMESTAMP=$(date -u +"%Y-%m-%dT%H:%M:%SZ")

          mkdir -p logs

          cat > logs/external_pr_activity_${PR_NUMBER}_${TIMESTAMP}.log << EOF
          External PR Activity Log
          ========================
          Timestamp: $TIMESTAMP
          PR Number: #$PR_NUMBER
          Workflow Run: ${{ github.event.workflow_run.id }}
          Validation Status: ${{ needs.process-external-pr-results.outputs.validation_status }}

          Actions Taken:
          - Comment Posted: ${{ needs.comment-on-external-pr.result }}
          - Tracking Issue Created: ${{ needs.create-tracking-issue.result }}

          Security Context:
          - Tier 2 Privileged Operations: Executed
          - Trusted Code Only: Enforced
          - External PR Isolation: Maintained

          Next Steps:
          - Await maintainer manual review
          - Complete security assessment
          - Perform integration testing
          - Obtain explicit merge approval
          EOF

          echo "External PR activity logged for PR #$PR_NUMBER"
          cat logs/external_pr_activity_${PR_NUMBER}_${TIMESTAMP}.log