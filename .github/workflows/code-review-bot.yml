name: Automated Code Review Bot

on:
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  pull-requests: write

jobs:
  code-review-bot:
    runs-on: ubuntu-latest
    name: Automated Terminal Policy Review

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Check for terminal policy violations
        id: violation-check
        run: |
          echo "Scanning PR for terminal output policy violations"

          VIOLATIONS=0

          # Get changed workflow files
          git diff --name-only origin/main...HEAD | grep -E '\.github/workflows/.*\.ya?ml$' > changed_workflows.txt || true

          if [ -s changed_workflows.txt ]; then
            echo "Checking workflow files for violations:"
            cat changed_workflows.txt

            while IFS= read -r file; do
              printf "Checking file: %s\n" "$file"

              # Check for emojis in ADDED lines only (lines starting with +)
              # Define emoji pattern for detection using Unicode ranges (safe for terminal output policy)
              EMOJI_PATTERN='\x{1F600}-\x{1F64F}|\x{1F300}-\x{1F5FF}|\x{1F680}-\x{1F6FF}'
              EMOJI_PATTERN="${EMOJI_PATTERN}|\x{2600}-\x{26FF}|\x{2700}-\x{27BF}|\x{1F44C}"
              EMOJI_PATTERN="${EMOJI_PATTERN}|\x{274C}|\x{1F4CB}|\x{1F50D}|\x{26A0}|\x{1F50D}"
              EMOJI_PATTERN="${EMOJI_PATTERN}|\x{1F4DD}|\x{1F680}|\x{1F4CB}|\x{1F50D}|\x{1F4DD}"

              if git diff origin/main...HEAD -- "$file" | grep '^+' | grep -P "$EMOJI_PATTERN" 2>/dev/null; then
                VIOLATIONS=$((VIOLATIONS + 1))
                # Get specific line details and write to temp file
                git diff origin/main...HEAD -- "$file" | grep -n '^+' | grep -P "$EMOJI_PATTERN" | head -3 > temp_violations.txt
                {
                  printf "%s\n" "- Emoji/Unicode in $file (causes terminal hanging)"
                  while IFS= read -r line; do
                    printf "  %s\n" "$line"
                  done < temp_violations.txt
                } >> violation_details.txt
                rm -f temp_violations.txt
              fi

              # Check for command substitution in echo in ADDED lines only
              # EXCLUDE safe patterns: piping to jq, assignment, GitHub Actions outputs
              if git diff origin/main...HEAD -- "$file" | grep '^+' | grep -E 'echo.*\$\(' | grep -v -E '\|\s*(jq|grep|awk|sed)|=\s*\$\(|GITHUB_(OUTPUT|ENV|PATH)' 2>/dev/null; then
                VIOLATIONS=$((VIOLATIONS + 1))
                # Get specific line details and write to temp file
                git diff origin/main...HEAD -- "$file" | grep -n '^+' | grep -E 'echo.*\$\(' | grep -v -E '\|\s*(jq|grep|awk|sed)|=\s*\$\(|GITHUB_(OUTPUT|ENV|PATH)' | head -3 > temp_violations.txt
                {
                  printf "%s\n" "- Command substitution in terminal output in $file (causes terminal hanging)"
                  while IFS= read -r line; do
                    printf "  %s\n" "$line"
                  done < temp_violations.txt
                } >> violation_details.txt
                rm -f temp_violations.txt
              fi

              # Check for variable expansion in echo in ADDED lines only
              # EXCLUDE safe patterns: piping to commands, assignment, GitHub Actions outputs, gh auth login
              if git diff origin/main...HEAD -- "$file" | grep '^+' | grep -E 'echo.*\$[A-Z_][A-Z0-9_]*' | grep -v -E '\|\s*(jq|grep|awk|sed|gh\s+auth)|=\s*\$\(|GITHUB_(OUTPUT|ENV|PATH)|gh\s+auth\s+login' 2>/dev/null; then
                VIOLATIONS=$((VIOLATIONS + 1))
                # Get specific line details and write to temp file
                git diff origin/main...HEAD -- "$file" | grep -n '^+' | grep -E 'echo.*\$[A-Z_][A-Z0-9_]*' | grep -v -E '\|\s*(jq|grep|awk|sed|gh\s+auth)|=\s*\$\(|GITHUB_(OUTPUT|ENV|PATH)|gh\s+auth\s+login' | head -3 > temp_violations.txt
                {
                  printf "%s\n" "- Variable expansion in terminal output in $file (can cause terminal hanging)"
                  while IFS= read -r line; do
                    printf "  %s\n" "$line"
                  done < temp_violations.txt
                } >> violation_details.txt
                rm -f temp_violations.txt
              fi

              # Check for printf with variable expansion in ADDED lines only
              # EXCLUDE safe patterns: printf with format strings (which are correct usage)
              if git diff origin/main...HEAD -- "$file" | grep '^+' | grep -E 'printf.*\$[A-Z_][A-Z0-9_]*' | grep -v -E "printf ['\"][^'\"]*%[sd][^'\"]*['\"]|printf -- " 2>/dev/null; then
                VIOLATIONS=$((VIOLATIONS + 1))
                # Get specific line details and write to temp file
                git diff origin/main...HEAD -- "$file" | grep -n '^+' | grep -E 'printf.*\$[A-Z_][A-Z0-9_]*' | grep -v -E "printf ['\"][^'\"]*%[sd][^'\"]*['\"]|printf -- " | head -3 > temp_violations.txt
                {
                  printf "%s\n" "- Variable expansion in printf terminal output in $file (can cause terminal hanging)"
                  while IFS= read -r line; do
                    printf "  %s\n" "$line"
                  done < temp_violations.txt
                } >> violation_details.txt
                rm -f temp_violations.txt
              fi

            done < changed_workflows.txt
          fi

          # Output results to GitHub Actions
          printf "violations=%s\n" "$VIOLATIONS" >> "$GITHUB_OUTPUT"

          # Output details to GitHub Actions
          if [ -f violation_details.txt ]; then
            printf "details=" >> "$GITHUB_OUTPUT"
            cat violation_details.txt >> "$GITHUB_OUTPUT"
            printf "\n" >> "$GITHUB_OUTPUT"
          else
            printf "details=" >> "$GITHUB_OUTPUT"
          fi

      - name: Auto-reject PR for violations
        if: steps.violation-check.outputs.violations != '0'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "BLOCKING PR: Terminal output policy violations detected"

          # Create rejection comment using safe file approach
          printf "**AUTOMATED REJECTION: Terminal Output Policy Violations**\n" > rejection_comment.md
          printf "\n" >> rejection_comment.md
          printf "This PR has been automatically rejected due to critical terminal output violations that WILL cause system hanging.\n" >> rejection_comment.md
          printf "\n" >> rejection_comment.md
          printf "**Violations Detected:**\n" >> rejection_comment.md

          # Safe violation details output - avoid multi-line expansion
          if [ -f violation_details.txt ]; then
            cat violation_details.txt >> rejection_comment.md
          fi

          {
            printf "\n" >> rejection_comment.md
            printf "**Required Before Re-submission:**\n" >> rejection_comment.md
            printf "1. Remove ALL emojis from workflow files\n" >> rejection_comment.md
            printf "2. Replace command substitution in terminal output with separate commands\n" >> rejection_comment.md
            printf "3. Use individual terminal output commands with plain ASCII text only\n" >> rejection_comment.md
            printf "4. Review docs/TERMINAL_OUTPUT_VIOLATIONS.md for approved patterns\n" >> rejection_comment.md
            printf "5. Run local validation: bash scripts/validate_terminal_output.sh\n" >> rejection_comment.md
            printf "\n" >> rejection_comment.md
            printf "**Policy Reminder:** DevOnboarder has ZERO TOLERANCE for these violations because they cause immediate system failures.\n" >> rejection_comment.md
            printf "\n" >> rejection_comment.md
            printf "**Next Steps:**\n" >> rejection_comment.md
            printf "%s\n" "- Fix all violations" >> rejection_comment.md
            printf "%s\n" "- Validate locally with the enforcement script" >> rejection_comment.md
            printf "%s\n" "- Push updates to trigger re-review" >> rejection_comment.md
          } >> rejection_comment.md

          gh pr comment ${{ github.event.pull_request.number }} --body-file rejection_comment.md

          # Request changes through review
          gh pr review ${{ github.event.pull_request.number }} --request-changes --body "AUTOMATED REJECTION: Critical terminal output policy violations detected. See comment for details."

      - name: Add enforcement checklist
        if: steps.violation-check.outputs.violations == '0'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Adding enforcement checklist to compliant PR"

          # Create checklist comment using safe file approach
          printf "**Terminal Output Policy Compliance Verified**\n" > checklist_comment.md
          printf "\n" >> checklist_comment.md
          printf "Automated review confirms this PR follows DevOnboarder terminal output standards.\n" >> checklist_comment.md
          printf "\n" >> checklist_comment.md
          printf "**Automated Compliance Verification:**\n" >> checklist_comment.md
          printf "%s\n" "- [x] No emojis or Unicode characters in terminal output" >> checklist_comment.md
          printf "%s\n" "- [x] No command substitution in terminal output" >> checklist_comment.md
          printf "%s\n" "- [x] No variable expansion in terminal output" >> checklist_comment.md
          printf "%s\n" "- [x] Only individual terminal output commands with plain ASCII text" >> checklist_comment.md
          printf "%s\n" "- [x] Complex output uses file-based patterns (individual terminal output commands)" >> checklist_comment.md
          printf "\n" >> checklist_comment.md
          printf "**Policy Compliance Status: VERIFIED**\n" >> checklist_comment.md
          printf "This PR has been automatically validated and meets all DevOnboarder terminal output standards.\n" >> checklist_comment.md

          gh pr comment ${{ github.event.pull_request.number }} --body-file checklist_comment.md

      - name: Log review results
        run: |
          echo "Code review bot results:"
          echo "Violations found:"
          echo "Count:"
          printf "%s\n" "${{ steps.violation-check.outputs.violations }}"
          echo "PR action determined:"
          echo "Action:"
          if [ "${{ steps.violation-check.outputs.violations }}" != '0' ]; then
            echo "REJECTED"
          else
            echo "APPROVED"
          fi
          echo "Enforcement level: ZERO TOLERANCE"
