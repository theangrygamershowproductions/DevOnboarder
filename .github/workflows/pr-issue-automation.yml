# ---
# title: "PR Issue Automation Workflow"
# description: "Automated GitHub Actions workflow for creating tracking issues when pull requests are opened"
# author: "TAGS Engineering"
# created_at: "2025-09-05"
# updated_at: "2025-09-05"
# tags: ["automation", "pr", "issues", "tracking", "github", "workflow", "ci"]
# project: "DevOnboarder"
# document_type: "workflow"
# status: "active"
# visibility: "internal"
# codex_scope: "TAGS"
# codex_role: "Engineering"
# codex_type: "WORKFLOW"
# codex_runtime: true
# codex-agent:
#   name: Agent.PR-Issue-Automation
#   role: Automatically creates issues for pull requests requiring tracking
#   scope: .github/workflows/pr-issue-automation.yml
#   triggers: Pull request opened/reopened on main/master, manual workflow dispatch
#   output: GitHub issues created for PR tracking and documentation
#   gpg-signing: Required for commit verification
# ---
name: PR Issue Automation

on:
    pull_request:
        types: [opened, reopened]
        branches: [main, master]

    # Allow manual triggering
    workflow_dispatch:
        inputs:
            pr_number:
                description: "PR number to create issue for"
                required: true
                type: string

concurrency:
    group: ${{ github.workflow }}-${{ github.ref }}
    cancel-in-progress: true

jobs:
    create-pr-tracking-issue:
        runs-on: ubuntu-latest
        if: ${{ !github.event.pull_request.draft }}

        permissions:
            contents: read
            pull-requests: write
            issues: write

        steps:
            - name: Checkout code
              uses: actions/checkout@v5

            - name: Setup GitHub CLI
              uses: ./.github/actions/setup-gh-cli
              with:
                  token: ${{ secrets.CI_ISSUE_AUTOMATION_TOKEN || secrets.CI_BOT_TOKEN || secrets.GITHUB_TOKEN }}

            - name: Create PR tracking issue
              env:
                  # Scoped token environment variables for DevOnboarder scripts
                  CI_ISSUE_AUTOMATION_TOKEN: ${{ secrets.CI_ISSUE_AUTOMATION_TOKEN }}
                  CI_BOT_TOKEN: ${{ secrets.CI_BOT_TOKEN }}
                  # PR context variables
                  PR_TITLE: ${{ github.event.pull_request.title }}
                  PR_AUTHOR: ${{ github.event.pull_request.user.login }}
                  PR_BRANCH: ${{ github.event.pull_request.head.ref }}
              run: |
                  # Determine PR number
                  if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
                      PR_NUMBER="${{ github.event.inputs.pr_number }}"
                      PR_DETAILS=$(gh pr view "$PR_NUMBER" --json title,author,headRefName)
                      PR_TITLE=$(echo "$PR_DETAILS" | jq -r '.title')
                      PR_AUTHOR=$(echo "$PR_DETAILS" | jq -r '.author.login')
                      PR_BRANCH=$(echo "$PR_DETAILS" | jq -r '.headRefName')
                  else
                      PR_NUMBER="${{ github.event.pull_request.number }}"
                      # Use environment variables directly
                  fi

                  echo "Creating tracking issue for PR"
                  printf "PR Number: %s\n" "$PR_NUMBER"
                  printf "Title: %s\n" "$PR_TITLE"
                  printf "Author: %s\n" "$PR_AUTHOR"
                  printf "Branch: %s\n" "$PR_BRANCH"

                  # Run PR issue creation script (uses scoped token hierarchy)
                  bash scripts/create_pr_tracking_issue.sh "$PR_NUMBER" "$PR_TITLE" "$PR_AUTHOR" "$PR_BRANCH"

            - name: Link issue to PR
              env:
                  # Scoped token environment variables for DevOnboarder scripts
                  CI_ISSUE_AUTOMATION_TOKEN: ${{ secrets.CI_ISSUE_AUTOMATION_TOKEN }}
                  CI_BOT_TOKEN: ${{ secrets.CI_BOT_TOKEN }}
              run: |
                  PR_NUMBER="${{ github.event.pull_request.number || github.event.inputs.pr_number }}"

                  # Get the created issue number from log file
                  if [[ -f "logs/pr_issue_creation_${PR_NUMBER}.log" ]]; then
                      ISSUE_NUMBER=$(grep -o "Issue #[0-9]\+" "logs/pr_issue_creation_${PR_NUMBER}.log" | head -1 | sed 's/Issue #//')

                      if [[ -n "$ISSUE_NUMBER" ]]; then
                          echo "Linking Issue to PR"

                          # Simple comments with basic content using wrapper script
                          bash scripts/ci_gh_issue_wrapper.sh pr-comment "$PR_NUMBER" \
                              "**Tracking Issue Created**: This PR is now tracked by Issue #$ISSUE_NUMBER"
                          bash scripts/ci_gh_issue_wrapper.sh comment "$ISSUE_NUMBER" \
                              "**Linked Pull Request**: PR #$PR_NUMBER is implementing this feature"
                      else
                          echo "Could not extract issue number from log file"
                      fi
                  else
                      echo "PR issue creation log file not found"
                  fi

            - name: Update project labels
              run: |
                  PR_NUMBER="${{ github.event.pull_request.number || github.event.inputs.pr_number }}"

                  # Add tracking labels (uses authenticated gh CLI from setup step)
                  echo "Adding tracking labels to PR"
                  gh pr edit "$PR_NUMBER" --add-label "pr-tracking,automated" || echo "Could not add labels"
