# ---
# codex-agent:
#   name: Agent.CI
#   role: Runs tests and linting for all pushes and pull requests
#   scope: .github/workflows/ci.yml
#   triggers: Push and pull_request events
#   output: Build artifacts and coverage reports
# ---
name: CI

on:
    push:
    pull_request:

concurrency:
    group: ${{ github.workflow }}-${{ github.ref }}
    cancel-in-progress: true

permissions:
    issues: write

jobs:
    validate-yaml:
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v3
            - uses: ibiqlik/action-yamllint@v3
              with:
                  file_or_dir: ".github/workflows/**/*.yml"
                  config_file: .github/.yamllint-config
    filter:
        needs: validate-yaml
        runs-on: ubuntu-latest
        outputs:
            code: ${{ steps.filter.outputs.code }}
        steps:
            - uses: actions/checkout@v3
              with:
                  fetch-depth: 0
            - name: Filter paths
              id: filter
              uses: dorny/paths-filter@v2
              with:
                  filters: |
                      code:
                          - '!docs/**'
                          - '!**/*.md'
                          - '**'
    test:
        needs: filter
        if: |
            github.event_name != 'push' ||
            !contains(join(github.event.head_commit.message), '[no-ci]') &&
            needs.filter.outputs.code == 'true'
        runs-on: ubuntu-latest
        strategy:
            matrix:
                python-version: ["3.12"]
                node-version: ["20"]
        timeout-minutes: 60
        env:
            VALE_VERSION: 3.12.0

        steps:
            - uses: actions/checkout@v3
              with:
                  fetch-depth: 0
                  ref: ${{ github.head_ref }}
            - name: Install shellcheck
              run: pip install shellcheck-py
            - name: Lint shell scripts
              run: shellcheck scripts/*.sh
            - name: Lint commit messages
              run: bash scripts/check_commit_messages.sh
            - name: Install GitHub CLI
              uses: ksivamuthu/actions-setup-gh-cli@v3
            - name: Show gh version
              run: which gh && gh --version
            - name: Verify gh version
              run: |
                  ver=$(gh --version | head -n1 | awk '{print $3}')
                  major=${ver%%.*}
                  if [ "$major" -lt 2 ]; then
                  echo "::error::GitHub CLI v2 or higher required" >&2
                  exit 1
                  fi
            - name: Set up Python
              uses: actions/setup-python@v4
              with:
                  python-version: ${{ matrix.python-version }}
            - name: Set up Node
              uses: actions/setup-node@v3
              with:
                  node-version: ${{ matrix.node-version }}
            - name: Verify language versions
              run: bash scripts/check_versions.sh
            - name: Cache pip downloads
              uses: actions/cache@v3
              with:
                  path: ~/.cache/pip
                  key: ${{ runner.os }}-py${{ matrix.python-version }}-${{ hashFiles('pyproject.toml') }}
                  restore-keys: |
                      ${{ runner.os }}-py${{ matrix.python-version }}-
            - name: Cache frontend node modules
              uses: actions/cache@v3
              with:
                  path: frontend/node_modules
                  key: ${{ runner.os }}-node${{ matrix.node-version }}-frontend-${{ hashFiles('frontend/package-lock.json') }}
                  restore-keys: |
                      ${{ runner.os }}-node${{ matrix.node-version }}-frontend-
            - name: Cache bot node modules
              uses: actions/cache@v3
              with:
                  path: bot/node_modules
                  key: ${{ runner.os }}-node${{ matrix.node-version }}-bot-${{ hashFiles('bot/package-lock.json') }}
                  restore-keys: |
                      ${{ runner.os }}-node${{ matrix.node-version }}-bot-
            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3
            - name: Prepare CI log directory
              run: mkdir -p ci-logs
            - name: Install dev dependencies
              run: |
                  pip install .[test] 2>&1 | tee ci-logs/pip-install.log || {
                      echo "Pip install failed. See docs/offline-setup.md for offline instructions." >&2
                      exit 1
                  }
            - name: Check Python dependencies
              run: pip check
            - name: Python dependency audit
              run: |
                  if ! pip-audit; then
                    code=$?
                    if [ "$code" -eq 1 ]; then
                      exit 1
                    else
                      echo "pip-audit failed. See docs/offline-setup.md for offline instructions." >&2
                    fi
                  fi
            - name: Install yamllint
              run: pip install yamllint
            - name: Lint and validate bot permissions
              run: bash scripts/validate-bot-permissions.sh
            - name: Run Black
              run: black --check .
            - name: Regenerate env docs
              run: python scripts/regenerate_env_docs.py
            - name: Validate env docs
              run: python scripts/check_env_docs.py
            - name: Setup environment
              run: ./scripts/setup-env.sh
            - name: Install package
              run: pip install -e .[test] 2>&1 | tee ci-logs/pip-install-editable.log
            - name: Enforce Potato ignore policy
              run: bash scripts/check_potato_ignore.sh
            - name: Generate OpenAPI spec
              run: python scripts/generate_openapi.py
            - name: Check committed OpenAPI spec
              run: |
                  git diff --quiet src/devonboarder/openapi.json || {
                      echo "::error::openapi.json is outdated. Run 'make openapi'" \
                           " and commit the changes.";
                      exit 1;
                  }
            - name: Validate OpenAPI contract
              run: openapi-spec-validator src/devonboarder/openapi.json
            - name: Alembic migration lint
              run: ./scripts/alembic_migration_check.sh
            - name: Doc coverage check
              run: python scripts/check_docstrings.py src/devonboarder
            - name: Run linter
              run: ruff check --output-format=github .
            - name: Run mypy
              run: mypy src/devonboarder
            - name: Install docs dependencies
              run: |
                  npm ci || {
                      echo "npm install failed. See docs/offline-setup.md for offline instructions." >&2
                      exit 1
                  }
            - name: Install Vale
              run: |
                  curl -fsSL https://github.com/errata-ai/vale/releases/download/v3.12.0/vale_3.12.0_Linux_64-bit.tar.gz | tar xz # pinned version
                  sudo mv vale /usr/local/bin/
            - name: Documentation style check
              run: ./scripts/check_docs.sh
            - name: Upload Vale results
              if: always()
              uses: actions/upload-artifact@v4
              with:
                  name: vale-results
                  path: vale-results.json
                  retention-days: 7
            - name: Generate secrets
              run: ./scripts/generate-secrets.sh
            - name: Audit environment variables
              run: |
                  env -i PATH="$PATH" bash -c 'set -a; source .env.dev; set +a; JSON_OUTPUT=env_audit.json bash scripts/audit_env_vars.sh' > env_audit.log
                  cat env_audit.log
                  cat env_audit.json
                  missing=$(python -c 'import json,sys;print("".join(json.load(open("env_audit.json")).get("missing", [])))')
                  extras=$(python -c 'import json,sys;d=json.load(open("env_audit.json"));print("".join(e for e in d.get("extra", []) if e not in ("PATH","PWD","SHLVL","_")))')
                  if [ -n "$missing" ] || [ -n "$extras" ]; then
                      echo "::error::Environment variable mismatch detected"
                      exit 1
                  fi
            - name: Upload env audit
              if: always()
              uses: actions/upload-artifact@v4
              with:
                  name: env-audit
                  path: |
                      env_audit.log
                      env_audit.json
                  retention-days: 7
            - name: Build containers
              run: docker compose -f docker-compose.ci.yaml --env-file .env.dev build 2>&1 | tee ci-logs/docker-build.log
            - name: Scan images with Trivy
              env:
                  TRIVY_VERSION: 0.47.0
              run: bash scripts/trivy_scan.sh docker-compose.ci.yaml
            - name: Start docker compose
              run: docker compose -f docker-compose.ci.yaml --env-file .env.dev up -d
            - name: Verify compose services
              run: |
                  docker compose -f docker-compose.ci.yaml --env-file .env.dev ps
                  failed=$(docker compose -f docker-compose.ci.yaml --env-file .env.dev ps -q | xargs -r docker inspect -f '{{.State.Status}}' | grep -v running || true)
                  if [ -n "$failed" ]; then
                      docker compose logs
                      exit 1
                  fi
            - name: Wait for auth service
              run: bash scripts/wait_for_service.sh http://localhost:8002/health 30 2 auth
            - name: Run diagnostics
              run: python -m diagnostics > diagnostics.log
            - name: Upload diagnostics
              if: always()
              uses: actions/upload-artifact@v4
              with:
                  name: diagnostics
                  path: diagnostics.log
                  retention-days: 7
            - name: Prepare test-results directory
              run: mkdir -p test-results
            - name: Run tests with coverage
              run: pytest --cov=src --cov-fail-under=95 --junitxml=test-results/pytest-results.xml 2>&1 | tee ci-logs/pytest.log
            - name: Upload pytest results
              if: always() && hashFiles('test-results/pytest-results.xml') != ''
              uses: actions/upload-artifact@v4
              with:
                  name: pytest-results
                  path: test-results/pytest-results.xml
                  retention-days: 7
            - name: Annotate pytest failures
              if: failure() && hashFiles('test-results/pytest-results.xml') != ''
              run: |
                  line=$(grep -n -m 1 '<failure' test-results/pytest-results.xml | cut -d: -f1)
                  echo "::error file=test-results/pytest-results.xml,line=${line}::Test failures detected"
            - name: Install frontend dependencies
              run: |
                  npm ci || {
                      echo "npm install failed. See docs/offline-setup.md for offline instructions." >&2
                      exit 1
                  }
              working-directory: frontend
            - name: Run frontend lint
              run: npm run lint
              working-directory: frontend
            - name: Run frontend tests with coverage
              run: npm test 2>&1 | tee vitest.log
              working-directory: frontend
            - name: Upload vitest log
              if: always()
              uses: actions/upload-artifact@v4
              with:
                  name: vitest-log
                  path: frontend/vitest.log
                  retention-days: 7
            - name: Cache Playwright browsers
              uses: actions/cache@v3
              with:
                  path: ~/.cache/ms-playwright
                  key: ${{ runner.os }}-node${{ matrix.node-version }}-playwright-${{ hashFiles('frontend/package-lock.json') }}
                  restore-keys: |
                      ${{ runner.os }}-node${{ matrix.node-version }}-playwright-
            - name: Install Playwright browsers
              run: npx playwright install --with-deps
              working-directory: frontend
            - name: Run E2E tests
              run: npm run test:e2e 2>&1 | tee playwright.log
              working-directory: frontend
              env:
                  AUTH_URL: http://localhost:8002
            - name: Run performance tests
              run: npm run perf 2>&1 | tee lhci.log
              working-directory: frontend
            - name: Run accessibility tests
              run: npm run test:a11y 2>&1 | tee a11y.log
              working-directory: frontend
            - name: Upload playwright log
              if: always()
              uses: actions/upload-artifact@v4
              with:
                  name: playwright-log
                  path: frontend/playwright.log
                  retention-days: 7
            - name: Upload accessibility log
              if: always()
              uses: actions/upload-artifact@v4
              with:
                  name: a11y-log
                  path: frontend/a11y.log
                  retention-days: 7
            - name: Upload Lighthouse log
              if: always()
              uses: actions/upload-artifact@v4
              with:
                  name: lighthouse-log
                  path: frontend/lhci.log
                  retention-days: 7
            - name: Upload Lighthouse report
              if: always()
              uses: actions/upload-artifact@v4
              with:
                  name: lighthouse-report
                  path: frontend/lhci-report
                  retention-days: 7
            - name: Install bot dependencies
              run: |
                  npm ci || {
                      echo "npm install failed. See docs/offline-setup.md for offline instructions." >&2
                      exit 1
                  }
              working-directory: bot
            - name: Run bot lint
              run: npm run lint
              working-directory: bot
            - name: Run bot tests with coverage
              run: npm test 2>&1 | tee jest.log
              working-directory: bot
            - name: Upload jest log
              if: always()
              uses: actions/upload-artifact@v4
              with:
                  name: jest-log
                  path: bot/jest.log
                  retention-days: 7
            - name: Generate coverage summary
              env:
                  GITHUB_SERVER_URL: ${{ github.server_url }}
                  GITHUB_REPOSITORY: ${{ github.repository }}
                  GITHUB_RUN_ID: ${{ github.run_id }}
              run: |
                  python scripts/post_coverage_comment.py coverage-summary.md
                  bash scripts/append_coverage_summary.sh coverage-summary.md
            - name: Upload coverage summary
              if: always()
              uses: actions/upload-artifact@v4
              with:
                  name: coverage-summary
                  path: coverage-summary.md
                  retention-days: 7
            - name: Upload coverage data
              if: always()
              uses: actions/upload-artifact@v4
              with:
                  name: coverage-data
                  path: |
                      bot/coverage
                      frontend/coverage
                      .coverage
                  retention-days: 7
            - name: Post coverage comment
              if: github.event_name == 'pull_request'
              run: |
                  gh_bin=$(which gh)
                  "$gh_bin" pr comment ${{ github.event.pull_request.number }} --body-file coverage-summary.md
              env:
                  GH_TOKEN: ${{ secrets.CI_BOT_TOKEN || secrets.GITHUB_TOKEN }}
            - name: Update coverage badge
              run: python scripts/update_coverage_badge.py coverage-summary.md coverage.svg
            - name: Commit coverage badge
              env:
                  GH_TOKEN: ${{ secrets.CI_BOT_TOKEN || secrets.GITHUB_TOKEN }}
              run: |
                  git config user.name "${{ github.actor }}"
                  git config user.email "${{ github.actor }}@users.noreply.github.com"
                  git add coverage.svg
                  if git diff --cached --quiet; then
                      echo "Badge unchanged"
                  else
                      git commit -m "chore(ci): update coverage badge"
                      git push
                  fi
            - name: Wait for auth service
              run: bash scripts/wait_for_service.sh http://localhost:8002/health 30 2 auth
            - name: Check CORS & security headers
              run: ./scripts/check_headers.py
              env:
                  CHECK_HEADERS_URL: http://localhost:8002/api/user
            - name: Run security audit
              run: bash scripts/security_audit.sh
            - name: Bandit Security Scan
              run: bandit -r src -ll
            - name: NPM Audit (high severity)
              run: npm audit --audit-level=high
              working-directory: frontend
            - name: NPM Audit (bot)
              run: npm audit --audit-level=high
              working-directory: bot
            - name: Stop docker compose
              if: always()
              run: docker compose -f docker-compose.ci.yaml --env-file .env.dev down
            - name: Label Codex PR
              if: github.actor == 'codex[bot]'
              run: |
                  gh_bin=$(which gh)
                  "$gh_bin" pr edit ${{ github.event.pull_request.number }} --add-label "🚧 Codex"
              env:
                  GH_TOKEN: ${{ secrets.CI_BOT_TOKEN || secrets.GITHUB_TOKEN }}
            - name: Summarize CI failures
              if: always()
              run: python scripts/summarize_ci_failures.py
            - name: Run CI failure diagnoser
              if: always()
              run: python scripts/ci_failure_diagnoser.py ${{ runner.temp }}/_github_workflow/*/job.log > audit.md
            - name: Download previous CI failure issue
              if: always()
              run: bash scripts/download_ci_failure_issue.sh
              env:
                  GH_TOKEN: ${{ secrets.CI_BOT_TOKEN || secrets.GITHUB_TOKEN }}
            - name: Create or update CI failure issue
              if: always() && github.event_name == 'pull_request'
              id: ci_failure
              run: |
                  set -euo pipefail
                  printf '\n<!-- sha: %s -->\n' "$GITHUB_SHA" >> summary.md
                  cat audit.md >> summary.md
                  gh_bin=$(which gh)
                  "$gh_bin" auth status 2>&1 | tee -a gh_cli.log
                  ISSUE_FILE=ci_failure_issue.txt
                  ISSUE_TITLE="CI Failure: PR #${{ github.event.pull_request.number }}"
                  if [ -f "$ISSUE_FILE" ]; then
                      ISSUE=$(cat "$ISSUE_FILE")
                      echo "Using saved issue number $ISSUE" | tee -a gh_cli.log
                      "$gh_bin" issue comment "$ISSUE" --body-file summary.md 2>&1 | tee -a gh_cli.log
                  else
                      echo "Searching for existing issue" | tee -a gh_cli.log
                      search_output=$($gh_bin issue list --label ci-failure --state open --search "$ISSUE_TITLE" 2>&1 | tee -a gh_cli.log)
                      ISSUE=$(echo "$search_output" | awk 'NR==1 {print $1}')
                      if [ -n "$ISSUE" ]; then
                          "$gh_bin" issue comment "$ISSUE" --body-file summary.md 2>&1 | tee -a gh_cli.log
                      else
                          ISSUE_URL=$($gh_bin issue create --title "$ISSUE_TITLE" --body-file summary.md --label ci-failure --assignee "$CI_BOT_USERNAME" | tee -a gh_cli.log)
                          ISSUE=$(echo "$ISSUE_URL" | grep -oE '[0-9]+$')
                      fi
                  fi
                  echo "issue-number=$ISSUE" >> "$GITHUB_OUTPUT"
              env:
                  GH_TOKEN: ${{ secrets.CI_BOT_TOKEN || secrets.GITHUB_TOKEN }}
                  CI_BOT_USERNAME: ${{ vars.CI_BOT_USERNAME }}
            - name: Save CI failure issue number
              if: failure() && github.event_name == 'pull_request'
              run: echo "${{ steps.ci_failure.outputs.issue-number }}" > ci_failure_issue.txt
            - name: Upload CI failure issue number
              if: failure() && github.event_name == 'pull_request'
              uses: actions/upload-artifact@v4
              with:
                  name: ci-failure-issue
                  path: ci_failure_issue.txt
                  retention-days: 7
            - name: Close CI failure issue
              if: success()
              run: |
                  gh_bin=$(which gh)
                  ISSUES=$($gh_bin issue list --label ci-failure --state open | tee -a gh_cli.log | awk '{print $1}')
                  for ISSUE in $ISSUES; do
                    "$gh_bin" issue comment "$ISSUE" --body "CI run ${{ github.run_id }} passed. Closing." 2>&1 | tee -a gh_cli.log
                    "$gh_bin" issue close "$ISSUE" 2>&1 | tee -a gh_cli.log
                  done
              env:
                  GH_TOKEN: ${{ secrets.CI_BOT_TOKEN || secrets.GITHUB_TOKEN }}
            - name: Upload CI logs
              if: always()
              uses: actions/upload-artifact@v4
              with:
                  name: ci-logs
                  path: |
                      ci-logs
                      ${{ runner.temp }}/_github_workflow/*/job.log
                      gh_cli.log
                      audit.md
