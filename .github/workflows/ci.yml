name: CI

on:
    push:
    pull_request:

jobs:
    test:
        runs-on: ubuntu-latest
        env:
            VALE_VERSION: 3.12.0

        steps:
            - uses: actions/checkout@v3
            - name: Set up Python
              uses: actions/setup-python@v4
              with:
                  python-version: "3.13"
            - name: Set up Node
              uses: actions/setup-node@v3
              with:
                  node-version: "22"
            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3
            - name: Install dev dependencies
              run: pip install -r requirements-dev.txt
            - name: Setup environment
              run: ./scripts/setup-env.sh
            - name: Install package
              run: pip install -e .
            - name: Enforce Potato ignore policy
              run: bash scripts/check_potato_ignore.sh
            - name: Validate OpenAPI contract
              run: |
                  pip install openapi-spec-validator
                  openapi-spec-validator src/devonboarder/openapi.json
            - name: Alembic migration lint
              run: ./scripts/alembic_migration_check.sh
            - name: Doc coverage check
              run: python scripts/check_docstrings.py src/devonboarder
            - name: Run linter
              run: ruff check --output-format=github .
            - name: Install Vale
              run: |
                  curl -fsSL https://github.com/errata-ai/vale/releases/download/v3.12.0/vale_3.12.0_Linux_64-bit.tar.gz | tar xz # pinned version
                  sudo mv vale /usr/local/bin/
            - name: Documentation style check
              run: ./scripts/check_docs.sh
            - name: Upload Vale results
              if: always()
              uses: actions/upload-artifact@v4
              with:
                  name: vale-results
                  path: vale-results.json
            - name: Prepare environment file
              run: cp .env.example .env.dev
            - name: Build containers
              run: docker compose -f docker-compose.ci.yaml --env-file .env.dev build
            - name: Start docker compose
              run: docker compose -f docker-compose.ci.yaml --env-file .env.dev up -d
            - name: Wait for auth service
              run: |
                  for i in {1..30}; do
                    if curl -fs http://localhost:8002/health; then
                      echo "Auth service is up!"
                      exit 0
                    fi
                    echo "Waiting for auth service..."
                    sleep 2
                  done
                  echo "Auth service failed to start"
                  docker compose -f docker-compose.ci.yaml logs auth --tail=50
                  exit 1
            - name: Run tests with coverage
              run: pytest --cov=src --cov-fail-under=85 --junitxml=pytest-results.xml
            - name: Upload pytest results
              if: always()
              uses: actions/upload-artifact@v4
              with:
                  name: pytest-results
                  path: pytest-results.xml
            - name: Annotate pytest failures
              if: failure()
              run: |
                  line=$(grep -n -m 1 '<failure' pytest-results.xml | cut -d: -f1)
                  echo "::error file=pytest-results.xml,line=${line}::Test failures detected"
            - name: Install frontend dependencies
              run: npm ci
              working-directory: frontend
            - name: Run frontend tests
              run: npm test --if-present
              working-directory: frontend
            - name: Upload coverage to Codecov
              uses: codecov/codecov-action@v3
            - name: Install bot dependencies
              run: npm ci
              working-directory: bot
            - name: Run bot tests
              run: npm test
              working-directory: bot
            - name: Wait for auth service before header check
              run: |
                  for i in {1..30}; do
                    if curl -fs http://localhost:8002/health; then
                      echo "Auth service is up!"
                      exit 0
                    fi
                    echo "Waiting for auth service..."
                    sleep 2
                  done
                  echo "Auth service failed to start"
                  docker compose -f docker-compose.ci.yaml logs auth --tail=50
                  exit 1
            - name: Check CORS & security headers
              run: |
                  pip install requests
                  python scripts/check_headers.py
              env:
                  CHECK_HEADERS_URL: http://localhost:8002/api/user
            - name: Stop docker compose
              run: docker compose -f docker-compose.ci.yaml --env-file .env.dev down
            - name: Label Codex PR
              if: github.actor == 'codex[bot]'
              uses: actions-ecosystem/action-add-labels@v1
              with:
                  labels: |
                      ðŸš§ Codex
