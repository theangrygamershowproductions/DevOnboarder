name: CI

on:
    push:
    pull_request:

jobs:
    test:
        runs-on: ubuntu-latest
        env:
            VALE_VERSION: 3.12.0

        steps:
            - uses: actions/checkout@v3
            - name: Set up Python
              uses: actions/setup-python@v4
              with:
                  python-version: "3.13"
            - name: Set up Node
              uses: actions/setup-node@v3
              with:
                  node-version: "22"
            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3
            - name: Install dev dependencies
              run: pip install -r requirements-dev.txt
            - name: Setup environment
              run: ./scripts/setup-env.sh
            - name: Install package
              run: pip install -e .
            - name: Enforce Potato ignore policy
              run: bash scripts/check_potato_ignore.sh
            - name: Validate OpenAPI contract
              run: |
                  pip install openapi-spec-validator
                  openapi-spec-validator src/devonboarder/openapi.json
            - name: Alembic migration lint
              run: ./scripts/alembic_migration_check.sh
            - name: Doc coverage check
              run: python scripts/check_docstrings.py src/devonboarder
            - name: Run linter
              run: ruff check --output-format=github .
            - name: Install Vale
              run: |
                  curl -fsSL https://github.com/errata-ai/vale/releases/download/v3.12.0/vale_3.12.0_Linux_64-bit.tar.gz | tar xz # pinned version
                  sudo mv vale /usr/local/bin/
            - name: Documentation style check
              run: ./scripts/check_docs.sh
            - name: Upload Vale results
              if: always()
              uses: actions/upload-artifact@v4
              with:
                  name: vale-results
                  path: vale-results.json
            - name: Generate secrets
              run: ./scripts/generate-secrets.sh
            - name: Build containers
              run: docker compose -f docker-compose.ci.yaml --env-file .env.dev build
            - name: Start docker compose
              run: docker compose -f docker-compose.ci.yaml --env-file .env.dev up -d
            - name: Wait for auth service
              run: |
                  for i in {1..30}; do
                    if curl -fs http://localhost:8002/health; then
                      echo "Auth service is up!"
                      exit 0
                    fi
                    echo "Waiting for auth service..."
                    sleep 2
                  done
                  echo "Auth service failed to start"
                  docker compose -f docker-compose.ci.yaml logs auth --tail=50
                  exit 1
            - name: Run tests with coverage
              run: pytest --cov=src --cov-fail-under=85 --junitxml=pytest-results.xml
            - name: Upload pytest results
              if: always()
              uses: actions/upload-artifact@v4
              with:
                  name: pytest-results
                  path: pytest-results.xml
            - name: Annotate pytest failures
              if: failure()
              run: |
                  line=$(grep -n -m 1 '<failure' pytest-results.xml | cut -d: -f1)
                  echo "::error file=pytest-results.xml,line=${line}::Test failures detected"
            - name: Install frontend dependencies
              run: npm ci
              working-directory: frontend
            - name: Run frontend tests with coverage
              run: npm run coverage --if-present 2>&1 | tee vitest.log
              working-directory: frontend
            - name: Upload vitest log
              if: always()
              uses: actions/upload-artifact@v4
              with:
                  name: vitest-log
                  path: frontend/vitest.log
            - name: Install Playwright browsers
              run: npx playwright install --with-deps
              working-directory: frontend
            - name: Run E2E tests
              run: npm run test:e2e 2>&1 | tee playwright.log
              working-directory: frontend
              env:
                  AUTH_URL: http://localhost:8002
            - name: Upload playwright log
              if: always()
              uses: actions/upload-artifact@v4
              with:
                  name: playwright-log
                  path: frontend/playwright.log
            - name: Upload coverage to Codecov
              uses: codecov/codecov-action@v3
            - name: Install bot dependencies
              run: npm ci
              working-directory: bot
            - name: Run bot tests with coverage
              run: npm run coverage 2>&1 | tee jest.log
              working-directory: bot
            - name: Upload jest log
              if: always()
              uses: actions/upload-artifact@v4
              with:
                  name: jest-log
                  path: bot/jest.log
            - name: Generate coverage summary
              env:
                  GITHUB_SERVER_URL: ${{ github.server_url }}
                  GITHUB_REPOSITORY: ${{ github.repository }}
                  GITHUB_RUN_ID: ${{ github.run_id }}
              run: |
                  python scripts/post_coverage_comment.py coverage-summary.md
                  bash scripts/append_coverage_summary.sh coverage-summary.md
            - name: Upload coverage summary
              if: always()
              uses: actions/upload-artifact@v4
              with:
                  name: coverage-summary
                  path: coverage-summary.md
            - name: Upload coverage data
              if: always()
              uses: actions/upload-artifact@v4
              with:
                  name: coverage-data
                  path: |
                      bot/coverage
                      frontend/coverage
                      .coverage
            - name: Post coverage comment
              if: github.event_name == 'pull_request'
              run: gh pr comment ${{ github.event.pull_request.number }} --body-file coverage-summary.md
              env:
                  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
            - name: Wait for auth service before header check
              run: |
                  for i in {1..30}; do
                    if curl -fs http://localhost:8002/health; then
                      echo "Auth service is up!"
                      exit 0
                    fi
                    echo "Waiting for auth service..."
                    sleep 2
                  done
                  echo "Auth service failed to start"
                  docker compose -f docker-compose.ci.yaml logs auth --tail=50
                  exit 1
            - name: Check CORS & security headers
              run: |
                  pip install requests
                  python scripts/check_headers.py
              env:
                  CHECK_HEADERS_URL: http://localhost:8002/api/user
            - name: Stop docker compose
              run: docker compose -f docker-compose.ci.yaml --env-file .env.dev down
            - name: Label Codex PR
              if: github.actor == 'codex[bot]'
              run: gh pr edit ${{ github.event.pull_request.number }} --add-label "ðŸš§ Codex"
              env:
                  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
            - name: Summarize CI failures
              if: failure()
              run: python scripts/summarize_ci_failures.py
            - name: Create or update CI failure issue
              if: failure()
              id: ci_failure
              run: |
                  ISSUE=$(gh issue list --state open --search "CI Failures for ${{ github.sha }} in:title" --json number --jq '.[0].number')
                  if [ -n "$ISSUE" ]; then
                      gh issue comment "$ISSUE" --body-file summary.md
                  else
                      ISSUE=$(gh issue create --title "CI Failures for ${{ github.sha }}" --body-file summary.md --label ci-failure --json number --jq '.number')
                  fi
                  echo "issue-number=$ISSUE" >> "$GITHUB_OUTPUT"
              env:
                  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
            - name: Save CI failure issue number
              if: failure()
              run: echo "${{ steps.ci_failure.outputs.issue-number }}" > ci_failure_issue.txt
            - name: Upload CI failure issue number
              if: failure()
              uses: actions/upload-artifact@v4
              with:
                  name: ci-failure-issue
                  path: ci_failure_issue.txt
            - name: Download CI failure issue artifact
              if: success()
              uses: actions/download-artifact@v4
              with:
                  name: ci-failure-issue
                  path: .
                  if-no-files-found: ignore
            - name: Set CI failure issue env var
              if: success()
              run: |
                  if [ -f ci_failure_issue.txt ]; then
                      echo "CI_FAILURE_ISSUE_NUMBER=$(cat ci_failure_issue.txt)" >> "$GITHUB_ENV"
                  fi
            - name: Comment on CI failure issue
              if: success() && env.CI_FAILURE_ISSUE_NUMBER != ''
              run: gh issue comment ${{ env.CI_FAILURE_ISSUE_NUMBER }} --body "CI run ${{ github.run_id }} for `${{ github.sha }}` succeeded. Closing this issue."
              env:
                  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
            - name: Close CI failure issue
              if: success() && env.CI_FAILURE_ISSUE_NUMBER != ''
              run: gh issue close ${{ env.CI_FAILURE_ISSUE_NUMBER }}
              env:
                  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
