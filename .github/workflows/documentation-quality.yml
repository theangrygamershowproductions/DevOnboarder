# ---
# codex-agent:
#   name: Agent.DocumentationQuality
#   role: Automated markdown validation and quality enforcement
#   scope: .github/workflows/documentation-quality.yml
#   triggers: push, pull_request (documentation changes)
#   output: .codex/logs/documentation-quality.log
# ---
name: Documentation Quality

on:
  push:
    branches: [main, feat/*, fix/*]
    paths:
      - '**.md'
      - 'docs/**'
      - '.github/workflows/documentation-quality.yml'
  pull_request:

jobs:
  validate-docs:
    permissions:
      contents: read
    runs-on: ubuntu-latest
    outputs:
      docs_changed: ${{ steps.check_docs.outputs.docs_changed }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0  # Fetch full history for proper diff comparison

      - name: Detect documentation changes
        id: check_docs
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            git fetch origin ${{ github.base_ref }}
            if git diff --name-only origin/${{ github.base_ref }}... | grep -qE '(^docs/|\\.md$)'; then
              echo "docs_changed=true" >> "$GITHUB_OUTPUT"
              echo "Documentation changes detected"
            else
              echo "docs_changed=false" >> "$GITHUB_OUTPUT"
              echo "No documentation changes detected"
            fi
          else
            echo "docs_changed=true" >> "$GITHUB_OUTPUT"
            echo "Push event - assuming documentation changes"
          fi

      - name: Setup Python environment
        if: steps.check_docs.outputs.docs_changed == 'true'
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Create virtual environment and install dependencies
        if: steps.check_docs.outputs.docs_changed == 'true'
        run: |
          python -m venv .venv
          source .venv/bin/activate
          pip install -e '.[test]'

      - name: Setup logs directory
        if: steps.check_docs.outputs.docs_changed == 'true'
        run: mkdir -p logs

      - name: Validate markdown with markdownlint
        if: steps.check_docs.outputs.docs_changed == 'true'
        run: |
          source .venv/bin/activate
          echo "Running markdownlint validation..."
          npx markdownlint-cli2 "**/*.md" "!node_modules/**" "!.venv/**" "!logs/**" "!htmlcov/**" || true
        continue-on-error: true

      - name: Run Vale documentation linting
        if: steps.check_docs.outputs.docs_changed == 'true'
        run: |
          source .venv/bin/activate
          echo "Running Vale documentation quality checks..."
          python -c "import vale.main; vale.main.main()" docs/ > logs/vale-results.log 2>&1 || true
          cat logs/vale-results.log
        continue-on-error: true

      - name: Check Potato Policy compliance
        if: steps.check_docs.outputs.docs_changed == 'true'
        run: |
          source .venv/bin/activate
          echo "Validating Potato Policy ignore compliance..."
          bash scripts/check_potato_ignore.sh
        continue-on-error: true

      - name: Upload documentation quality logs
        if: always() && steps.check_docs.outputs.docs_changed == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: documentation-quality-logs
          path: logs/
          retention-days: 7

      - name: No documentation changes detected
        if: steps.check_docs.outputs.docs_changed == 'false'
        run: echo "No documentation changes detected. Skipping documentation validation."

  quality-assessment:
    needs: validate-docs
    runs-on: ubuntu-latest
    if: needs.validate-docs.outputs.docs_changed == 'true'
    permissions:
      contents: read
      actions: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Setup Python environment
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Create virtual environment
        run: |
          python -m venv .venv
          source .venv/bin/activate
          pip install -e '.[test]'

      - name: Run documentation quality assessment
        run: |
          source .venv/bin/activate
          mkdir -p logs
          echo "Running comprehensive documentation quality assessment..."
          bash scripts/standards_enforcement_assessment.sh > logs/quality-assessment.log 2>&1 || true
          cat logs/quality-assessment.log

      - name: Upload quality assessment results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: quality-assessment-results
          path: logs/quality-assessment.log
          retention-days: 7
