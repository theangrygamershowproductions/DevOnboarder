# ---
# codex-agent:
#   name: Agent.CleanupCiFailure
#   role: Closes stale ci-failure issues
#   scope: .github/workflows/cleanup-ci-failure.yml
#   triggers: Daily schedule
#   output: Closed or reported ci-failure issues
# ---
on:
    schedule:
        - cron: "0 0 * * *"
jobs:
    validate-yaml:
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v3
            - uses: ibiqlik/action-yamllint@v3
              with:
                  file_or_dir: ".github/workflows/**/*.yml"
                  config_file: .github/.yamllint-config
            - name: Run yamllint
              run: |
                pip install yamllint
                yamllint -c .github/.yamllint-config .github/workflows/**/*.yml > yamllint.log || true
            - name: Upload yamllint log
              if: always()
              uses: actions/upload-artifact@v4
              with:
                  name: yamllint-log
                  path: yamllint.log
    cleanup:
        needs: validate-yaml
        runs-on: ubuntu-latest
        permissions:
            issues: write
        steps:
            - name: Install GitHub CLI
              uses: ksivamuthu/actions-setup-gh-cli@v3
            - name: Show gh version
              run: which gh && gh --version
            - name: Verify gh version
              run: |
                ver=$(gh --version | head -n1 | awk '{print $3}')
                major=${ver%%.*}
                if [ "$major" -lt 2 ]; then
                  echo "::error::GitHub CLI v2 or higher required" >&2
                  exit 1
                fi
            - name: Install PyYAML
              run: pip install PyYAML
            - name: Verify bot permission
              run: bash scripts/check-bot-permissions.sh orchestration_bot "issues: write"
            - name: Debug token and permissions
              run: |
                gh auth status
                gh api rate_limit
                gh issue list --label ci-failure --state open | awk '{print $1}'
              env:
                  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              continue-on-error: true

            - name: Close ci-failure issues
              run: |
                gh_bin=$(which gh)
                failed=0
                closed=0
                issues=$($gh_bin issue list --label ci-failure --state open | awk '{print $1}') || failed=1
                for n in $issues; do
                  if "$gh_bin" issue close "$n" --reason completed; then
                    closed=$((closed+1))
                  else
                    failed=1
                  fi
                done
                if [ "$failed" -ne 0 ]; then
                  echo "::error::Cleanup failed"
                  printf '%s\n' "Automatic cleanup could not close one or more ci-failure issues." > body.md
                  jq -Rs --arg title "Cleanup CI failure issues failed" '{title:$title,body:.}' body.md > notify.json
                  gh workflow run notify.yml -f data="$(cat notify.json)" || true
                  exit 1
                fi
                echo "Closed $closed ci-failure issues"
              env:
                  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
