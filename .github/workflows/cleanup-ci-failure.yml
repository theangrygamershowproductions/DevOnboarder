# ---
# codex-agent:
#   name: Agent.CleanupCiFailure
#   role: Closes stale ci-failure issues
#   scope: .github/workflows/cleanup-ci-failure.yml
#   triggers: Daily schedule
#   output: Closed or reported ci-failure issues
# ---
name: Cleanup CI Failure

on:
    schedule:
        - cron: "0 0 * * *"  # Daily cleanup as before
    pull_request:
        types: [closed]      # Trigger when PRs are closed (merged or not)
    workflow_run:
        workflows: ["CI"]    # Trigger after CI workflow completes
        types: [completed]

jobs:
    validate-yaml:
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v3
            - uses: ibiqlik/action-yamllint@v3
              with:
                  file_or_dir: ".github/workflows/**/*.yml"
                  config_file: .github/.yamllint-config
            - name: Run yamllint
              run: |
                  pip install yamllint
                  yamllint -c .github/.yamllint-config .github/workflows/**/*.yml > yamllint.log || true
            - name: Upload yamllint log
              if: always()
              uses: actions/upload-artifact@v4
              with:
                  name: yamllint-log
                  path: yamllint.log

    cleanup:
        needs: validate-yaml
        runs-on: ubuntu-latest
        permissions:
            issues: write
        env:
            GH_TOKEN: ${{ secrets.CLEANUP_CI_FAILURE_KEY }}
        steps:
            - name: Check for Cleanup Token
              run: |
                  if [ -z "$GH_TOKEN" ]; then
                    echo "::error::CLEANUP_CI_FAILURE_KEY is not set! Exiting to prevent unauthenticated GitHub CLI use."
                    exit 1
                  fi
            - name: Install the gh cli
              uses: sersoft-gmbh/setup-gh-cli-action@v2
              with:
                  version: stable
              env:
                  GH_TOKEN: ${{ env.GH_TOKEN }}
            - name: Show gh version
              run: which gh && gh --version
            - name: Verify gh version
              run: |
                  ver=$(gh --version | head -n1 | awk '{print $3}')
                  major=${ver%%.*}
                  if [ "$major" -lt 2 ]; then
                    echo "::error::GitHub CLI v2 or higher required" >&2
                    exit 1
                  fi
            - name: Install PyYAML
              run: pip install PyYAML
            - name: Verify bot permission
              run: 'bash scripts/check-bot-permissions.sh orchestration_bot "issues: write"'
            - name: Debug token and permissions
              run: |
                  gh auth status
                  gh api rate_limit
                  python scripts/list_open_ci_issues.py
              continue-on-error: true
            - name: Checkout repository
              uses: actions/checkout@v4
            - name: Smart CI failure cleanup
              run: |
                  mkdir -p logs

                  # Determine trigger type and handle appropriately
                  if [[ "${{ github.event_name }}" == "pull_request" ]]; then
                    echo "Triggered by PR #${{ github.event.number }} closure"
                    if [[ "${{ github.event.pull_request.merged }}" == "true" ]]; then
                      echo "PR was merged - closing related CI failure issues"
                      bash scripts/manage_ci_failure_issues.sh close ${{ github.event.number }}
                    else
                      echo "PR was closed without merge - leaving CI failure issues open"
                    fi
                  elif [[ "${{ github.event_name }}" == "workflow_run" ]]; then
                    echo "Triggered by CI workflow completion"
                    if [[ "${{ github.event.workflow_run.conclusion }}" == "success" ]]; then
                      echo "CI workflow succeeded - checking for outdated failure issues"
                      # Get recent PR numbers from successful runs and clean their issues
                      gh run list --workflow=ci.yml --status=success --limit=5 --json number,headBranch | \
                        jq -r '.[] | select(.headBranch != "main") | .number' | \
                        while read -r run_id; do
                          pr_num=$(gh run view "$run_id" --json headBranch | jq -r '.headBranch' | sed 's/.*pr-//' | sed 's/-.*//')
                          if [[ "$pr_num" =~ ^[0-9]+$ ]]; then
                            echo "Cleaning issues for PR #$pr_num after successful CI"
                            bash scripts/manage_ci_failure_issues.sh close "$pr_num" || true
                          fi
                        done
                    fi
                  else
                    echo "Daily scheduled cleanup - closing all stale CI failure issues"
                    # Original daily cleanup logic but smarter
                    issues=$(gh issue list --label ci-failure --state open --json number,title)
                    echo "$issues" | jq -r '.[] | .number' | while read -r issue_num; do
                      if [[ -n "$issue_num" ]]; then
                        # Check if issue is for a merged PR or old failure
                        issue_title=$(echo "$issues" | jq -r ".[] | select(.number==$issue_num) | .title")
                        if [[ "$issue_title" =~ PR\ #([0-9]+) ]]; then
                          pr_num="${BASH_REMATCH[1]}"
                          pr_state=$(gh pr view "$pr_num" --json state,merged | jq -r '.state + ":" + (.merged|tostring)')
                          if [[ "$pr_state" == "MERGED:true" ]]; then
                            echo "Closing CI failure issue #$issue_num for merged PR #$pr_num"
                            bash scripts/manage_ci_failure_issues.sh close "$pr_num" || true
                          fi
                        else
                          echo "Closing stale CI failure issue #$issue_num (no PR reference)"
                          gh issue close "$issue_num" --reason "not_planned" --comment "Closing stale CI failure issue during daily cleanup." || true
                        fi
                      fi
                    done
                  fi
