---
repos:
    - repo: https://github.com/psf/black
      rev: 25.1.0
      hooks:
          - id: black
            language_version: python3
            args: ["--line-length=88", "--target-version=py312"]
    - repo: https://github.com/charliermarsh/ruff-pre-commit
      rev: v0.12.5
      hooks:
          - id: ruff
            args: [--fix, --exit-non-zero-on-fix]
    # prettier disabled to prevent root node_modules pollution
    # Use manual formatting: cd frontend && npx prettier --write "**/*.{json,yaml,yml}"
    - repo: https://github.com/pre-commit/pre-commit-hooks
      rev: v5.0.0
      hooks:
          - id: trailing-whitespace
          - id: end-of-file-fixer
    - repo: https://github.com/shellcheck-py/shellcheck-py
      rev: v0.10.0.1
      hooks:
          - id: shellcheck
            files: ^scripts/.*\.sh$
    - repo: https://github.com/codespell-project/codespell
      rev: v2.4.1
      hooks:
          - id: codespell
            files: '\.(md|txt|rst)$'
            args: ["--ignore-words=.codespell-ignore"]
    - repo: https://github.com/DavidAnson/markdownlint-cli2
      rev: v0.18.1
      hooks:
          - id: markdownlint-cli2
            files: '\.md$'
            pass_filenames: true
    - repo: https://github.com/adrienverge/yamllint.git
      rev: v1.37.0
      hooks:
          - id: yamllint
    - repo: local
      hooks:
          - id: terminal-output-policy
            name: Terminal Output Policy Enforcement
            entry: scripts/validate_terminal_output_simple.sh
            language: script
            files: \.github/workflows/.*\.ya?ml$
            stages: [pre-commit]
            always_run: false
            pass_filenames: false
          - id: enforce-no-root-artifacts
            name: Root Artifact Guard
            entry: scripts/enforce_output_location.sh check
            language: script
            always_run: true
            pass_filenames: false
          - id: validate-no-verify
            name: No-Verify Usage Validation
            entry: scripts/validate_no_verify_usage.sh
            language: script
            stages: [pre-commit, pre-push]
            always_run: true
            pass_filenames: false
          - id: clean-pytest-artifacts
            name: Clean pytest sandbox artifacts
            entry: scripts/clean_pytest_artifacts.sh
            language: script
            always_run: true
            pass_filenames: false
            stages: [pre-commit]
          - id: centralized-logging-policy
            name: Centralized Logging Policy Enforcement
            entry: scripts/validate_log_centralization.sh
            language: script
            always_run: true
            pass_filenames: false
            stages: [pre-commit]
          - id: docs-quality
            name: Docs quality checks
            entry: bash
            args:
                [
                    "-c",
                    "mkdir -p logs && bash scripts/check_docs.sh 2>&1 | tee logs/docs_check_$(date +%Y%m%d_%H%M%S).log",
                ]
            language: system
            files: \.md$
          - id: potato-ignore-check
            name: Potato ignore policy
            entry: bash
            args:
                [
                    "-c",
                    "mkdir -p logs && bash scripts/check_potato_ignore.sh 2>&1 | tee logs/potato_check_$(date +%Y%m%d_%H%M%S).log",
                ]
            language: system
          - id: env-docs-check
            name: Environment docs check
            entry: bash
            args:
                [
                    "-c",
                    "mkdir -p logs && source .venv/bin/activate && python scripts/check_env_docs.py 2>&1 | tee logs/env_docs_check_$(date +%Y%m%d_%H%M%S).log",
                ]
            language: system
          - id: validate-agents
            name: Validate Codex Agents with DevOnboarder Standards
            entry: bash
            args:
                [
                    "-c",
                    "mkdir -p logs && source .venv/bin/activate && python scripts/validate_agents.py 2>&1 | tee logs/agent_validation_$(date +%Y%m%d_%H%M%S).log",
                ]
            language: system
            pass_filenames: false
            files: ^(agents/.*\.md|\.codex/agents/.*\.md|codex/agents/.*\.md)$
          - id: validate-metadata-standards
            name: Core Metadata Standards Compliance
            entry: bash
            args:
                [
                    "-c",
                    "mkdir -p logs && source .venv/bin/activate && python scripts/validate_metadata_standards.py 2>&1 | tee logs/metadata_validation_$(date +%Y%m%d_%H%M%S).log",
                ]
            language: system
            pass_filenames: false
            files: ^(docs/.*\.md|agents/.*\.md|\.codex/.*\.md)$
          - id: frontend-eslint
            name: Frontend ESLint
            entry: bash
            args:
                [
                    "-c",
                    "mkdir -p logs && cd frontend && npm run lint 2>&1 | tee ../logs/frontend_eslint_$(date +%Y%m%d_%H%M%S).log",
                ]
            language: system
            pass_filenames: false
          - id: bot-eslint
            name: Bot ESLint
            entry: bash
            args:
                [
                    "-c",
                    "mkdir -p logs && cd bot && npm run lint 2>&1 | tee ../logs/bot_eslint_$(date +%Y%m%d_%H%M%S).log",
                ]
            language: system
            pass_filenames: false
          - id: pytest
            name: Python tests
            entry: bash
            args:
                [
                    "-c",
                    "mkdir -p logs && source .venv/bin/activate && TMPDIR=logs python -m pytest --cov=src --cov-fail-under=95 --cov-report=term --cov-report=html:logs/htmlcov --cov-report=xml:logs/coverage.xml --tb=short 2>&1 | tee logs/pytest_$(date +%Y%m%d_%H%M%S).log; exit ${PIPESTATUS[0]}",
                ]
            language: system
            pass_filenames: false
            always_run: false
            files: ^(src/|tests/|pytest\.ini|pyproject\.toml).*$
            stages: [pre-commit]
          - id: milestone-format-validation
            name: Milestone Format Validation
            entry: bash
            args:
                [
                    "-c",
                    "mkdir -p logs && source .venv/bin/activate && python scripts/validate_milestone_format.py milestones/ 2>&1 | tee logs/milestone_validation_$(date +%Y%m%d_%H%M%S).log",
                ]
            language: system
            pass_filenames: false
            always_run: false
            files: ^milestones/.*\.md$
            stages: [pre-commit]
          - id: validate
            name: Full validation suite
            entry: bash
            args:
                [
                    "-c",
                    "mkdir -p logs && source .venv/bin/activate && bash scripts/validate.sh 2>&1 | tee logs/validation_$(date +%Y%m%d_%H%M%S).log",
                ]
            language: system
            pass_filenames: false
            stages: [pre-commit]
          - id: prevent-archived-doc-edits
            name: Prevent edits to archived AARs
            language: system
            pass_filenames: false
            stages: [pre-commit, pre-push]
            entry: bash -c 'git diff --name-only --cached --diff-filter=ACMRD | grep -q "^docs/ci/.*-archived\.md$" && echo "Archived AARs are immutable." && exit 1 || true'
